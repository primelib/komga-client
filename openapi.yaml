openapi: 3.0.0
info:
    title: Komga Client
    description: |-
        This is the API specification for the Komga API.
    license:
        name: 'Komga API: MIT'
        url: 'Komga API: https://github.com/gotson/komga/blob/master/LICENSE'
    version: (Komga API) v1.0
servers:
    - url: http://127.0.0.1:25600
      description: Komga Server
paths:
    "/api/v2/series/{seriesId}/read-progress/tachiyomi":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdReadProgressTachiyomiV2"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TachiyomiReadProgressV2Dto"}
        put:
            tags:
                - "series-controller"
            operationId: "putSeriesBySeriesIdReadProgressTachiyomiV2"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/TachiyomiReadProgressUpdateV2Dto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/series/{seriesId}/thumbnails/{thumbnailId}/selected":
        put:
            tags:
                - "series-controller"
            operationId: "putSeriesBySeriesIdThumbnailByThumbnailIdSelectedV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/readlists/{id}/thumbnails/{thumbnailId}/selected":
        put:
            tags:
                - "read-list-controller"
            operationId: "putReadlistByIdThumbnailByThumbnailIdSelectedV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/readlists/{id}/read-progress/tachiyomi":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdReadProgressTachiyomiV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TachiyomiReadProgressDto"}
        put:
            tags:
                - "read-list-controller"
            operationId: "putReadlistByIdReadProgressTachiyomiV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/TachiyomiReadProgressUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/page-hashes":
        get:
            tags:
                - "page-hash-controller"
            operationId: "getPageHashesV1"
            parameters:
                - name: "action"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "DELETE_AUTO"
                            - "DELETE_MANUAL"
                            - "IGNORE"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PagePageHashKnownDto"}
        put:
            tags:
                - "page-hash-controller"
            operationId: "putPageHashesV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/PageHashCreationDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/libraries/{libraryId}":
        get:
            tags:
                - "library-controller"
            operationId: "getLibraryByLibraryIdV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LibraryDto"}
        put:
            tags:
                - "library-controller"
            operationId: "putLibraryByLibraryIdV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/LibraryUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
            deprecated: true
        delete:
            tags:
                - "library-controller"
            operationId: "deleteLibraryByLibraryIdV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
        patch:
            tags:
                - "library-controller"
            operationId: "patchLibraryByLibraryIdV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/LibraryUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/collections/{id}/thumbnails/{thumbnailId}/selected":
        put:
            tags:
                - "series-collection-controller"
            operationId: "putCollectionByIdThumbnailByThumbnailIdSelectedV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/books/{bookId}/thumbnails/{thumbnailId}/selected":
        put:
            tags:
                - "book-controller"
            operationId: "putBookByBookIdThumbnailByThumbnailIdSelectedV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/books/thumbnails":
        put:
            tags:
                - "book-controller"
            operationId: "putBooksThumbnailsV1"
            parameters:
                - name: "for_bigger_result_only"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/announcements":
        get:
            tags:
                - "announcement-controller"
            operationId: "getAnnouncementsV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/JsonFeedDto"}
        put:
            tags:
                - "announcement-controller"
            operationId: "putAnnouncementsV1"
            requestBody:
                content:
                    "application/json":
                        schema:
                            $ref: '#/components/schemas/PutAnnouncementsV1B'
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v2/users":
        get:
            tags:
                - "user-controller"
            operationId: "getUsersV2"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetUsersV2R200'
        post:
            tags:
                - "user-controller"
            operationId: "postUsersV2"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/UserCreationDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "201":
                    description: "Created"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/UserDto"}
    "/api/v1/transient-books":
        post:
            tags:
                - "transient-books-controller"
            operationId: "postTransientBooksV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/ScanRequestDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/PostTransientBooksV1R200'
    "/api/v1/transient-books/{id}/analyze":
        post:
            tags:
                - "transient-books-controller"
            operationId: "postTransientBookByIdAnalyzeV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/TransientBookDto"}
    "/api/v1/series/{seriesId}/thumbnails":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdThumbnailsV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetSeriesBySeriesIDThumbnailsV1R200'
        post:
            tags:
                - "series-controller"
            operationId: "postSeriesBySeriesIdThumbnailsV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "selected"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
            requestBody:
                content:
                    "multipart/form-data":
                        schema:
                            $ref: '#/components/schemas/PostSeriesBySeriesIDThumbnailsV1B'
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ThumbnailSeriesDto"}
    "/api/v1/series/{seriesId}/read-progress":
        post:
            tags:
                - "series-controller"
            description: "Mark all book for series as read"
            operationId: "postSeriesBySeriesIdReadProgressV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
        delete:
            tags:
                - "series-controller"
            description: "Mark all book for series as unread"
            operationId: "deleteSeriesBySeriesIdReadProgressV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/series/{seriesId}/metadata/refresh":
        post:
            tags:
                - "series-controller"
            operationId: "postSeriesBySeriesIdMetadataRefreshV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/series/{seriesId}/analyze":
        post:
            tags:
                - "series-controller"
            operationId: "postSeriesBySeriesIdAnalyzeV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/readlists":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistsV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageReadListDto"}
        post:
            tags:
                - "read-list-controller"
            operationId: "postReadlistsV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/ReadListCreationDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ReadListDto"}
    "/api/v1/readlists/{id}/thumbnails":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdThumbnailsV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetReadlistByIDThumbnailsV1R200'
        post:
            tags:
                - "read-list-controller"
            operationId: "postReadlistByIdThumbnailsV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "selected"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
            requestBody:
                content:
                    "multipart/form-data":
                        schema:
                            $ref: '#/components/schemas/PostReadlistByIDThumbnailsV1B'
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ThumbnailReadListDto"}
    "/api/v1/readlists/match/comicrack":
        post:
            tags:
                - "read-list-controller"
            operationId: "postReadlistsMatchComicrackV1"
            requestBody:
                content:
                    "application/json":
                        schema:
                            $ref: '#/components/schemas/PostReadlistsMatchComicrackV1B'
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ReadListRequestMatchDto"}
    "/api/v1/page-hashes/{pageHash}/delete-match":
        post:
            tags:
                - "page-hash-controller"
            operationId: "postPageHashByPageHashDeleteMatchV1"
            parameters:
                - name: "pageHash"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/PageHashMatchDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/page-hashes/{pageHash}/delete-all":
        post:
            tags:
                - "page-hash-controller"
            operationId: "postPageHashByPageHashDeleteAllV1"
            parameters:
                - name: "pageHash"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/libraries":
        get:
            tags:
                - "library-controller"
            operationId: "getLibrariesV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetLibrariesV1R200'
        post:
            tags:
                - "library-controller"
            operationId: "postLibrariesV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/LibraryCreationDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LibraryDto"}
    "/api/v1/libraries/{libraryId}/scan":
        post:
            tags:
                - "library-controller"
            operationId: "postLibraryByLibraryIdScanV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "deep"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/libraries/{libraryId}/metadata/refresh":
        post:
            tags:
                - "library-controller"
            operationId: "postLibraryByLibraryIdMetadataRefreshV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/libraries/{libraryId}/empty-trash":
        post:
            tags:
                - "library-controller"
            operationId: "postLibraryByLibraryIdEmptyTrashV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/libraries/{libraryId}/analyze":
        post:
            tags:
                - "library-controller"
            operationId: "postLibraryByLibraryIdAnalyzeV1"
            parameters:
                - name: "libraryId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/filesystem":
        post:
            tags:
                - "file-system-controller"
            operationId: "postFilesystemV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/DirectoryRequestDto"}
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/DirectoryListingDto"}
    "/api/v1/collections":
        get:
            tags:
                - "series-collection-controller"
            operationId: "getCollectionsV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageCollectionDto"}
        post:
            tags:
                - "series-collection-controller"
            operationId: "postCollectionsV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/CollectionCreationDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/CollectionDto"}
    "/api/v1/collections/{id}/thumbnails":
        get:
            tags:
                - "series-collection-controller"
            operationId: "getCollectionByIdThumbnailsV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetCollectionByIDThumbnailsV1R200'
        post:
            tags:
                - "series-collection-controller"
            operationId: "postCollectionByIdThumbnailsV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "selected"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
            requestBody:
                content:
                    "multipart/form-data":
                        schema:
                            $ref: '#/components/schemas/PostCollectionByIDThumbnailsV1B'
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ThumbnailSeriesCollectionDto"}
    "/api/v1/claim":
        get:
            tags:
                - "claim-controller"
            operationId: "getClaimV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ClaimStatus"}
        post:
            tags:
                - "claim-controller"
            operationId: "postClaimV1"
            parameters:
                - name: "X-Komga-Email"
                  in: "header"
                  required: true
                  schema:
                    type: "string"
                - name: "X-Komga-Password"
                  in: "header"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/UserDto"}
    "/api/v1/books/{bookId}/thumbnails":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdThumbnailsV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetBookByBookIDThumbnailsV1R200'
        post:
            tags:
                - "book-controller"
            operationId: "postBookByBookIdThumbnailsV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "selected"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
            requestBody:
                content:
                    "multipart/form-data":
                        schema:
                            $ref: '#/components/schemas/PostBookByBookIDThumbnailsV1B'
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ThumbnailBookDto"}
    "/api/v1/books/{bookId}/metadata/refresh":
        post:
            tags:
                - "book-controller"
            operationId: "postBookByBookIdMetadataRefreshV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/books/{bookId}/analyze":
        post:
            tags:
                - "book-controller"
            operationId: "postBookByBookIdAnalyzeV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/books/import":
        post:
            tags:
                - "book-controller"
            operationId: "postBooksImportV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/BookImportBatchDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v2/users/{id}":
        delete:
            tags:
                - "user-controller"
            operationId: "deleteUserByIdV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
        patch:
            tags:
                - "user-controller"
            operationId: "patchUserByIdV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/UserUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v2/users/{id}/password":
        patch:
            tags:
                - "user-controller"
            operationId: "patchUserByIdPasswordV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/PasswordUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v2/users/me/password":
        patch:
            tags:
                - "user-controller"
            operationId: "patchUsersMePasswordV2"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/PasswordUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/settings":
        get:
            tags:
                - "settings-controller"
            operationId: "getSettingsV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SettingsDto"}
        patch:
            tags:
                - "settings-controller"
            operationId: "patchSettingsV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/SettingsUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/series/{seriesId}/metadata":
        patch:
            tags:
                - "series-controller"
            operationId: "patchSeriesBySeriesIdMetadataV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/SeriesMetadataUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/readlists/{id}":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ReadListDto"}
        delete:
            tags:
                - "read-list-controller"
            operationId: "deleteReadlistByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
        patch:
            tags:
                - "read-list-controller"
            operationId: "patchReadlistByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/ReadListUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/collections/{id}":
        get:
            tags:
                - "series-collection-controller"
            operationId: "getCollectionByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/CollectionDto"}
        delete:
            tags:
                - "series-collection-controller"
            operationId: "deleteCollectionByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
        patch:
            tags:
                - "series-collection-controller"
            operationId: "patchCollectionByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/CollectionUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/books/{bookId}/read-progress":
        delete:
            tags:
                - "book-controller"
            description: "Mark book as unread"
            operationId: "deleteBookByBookIdReadProgressV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
        patch:
            tags:
                - "book-controller"
            description: "Mark book as read and/or change page progress"
            operationId: "patchBookByBookIdReadProgressV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/ReadProgressUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/books/{bookId}/metadata":
        patch:
            tags:
                - "book-controller"
            operationId: "patchBookByBookIdMetadataV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/BookMetadataUpdateDto"}
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/books/metadata":
        patch:
            tags:
                - "book-controller"
            operationId: "patchBooksMetadataV1"
            requestBody:
                content:
                    "application/json":
                        schema:
                            $ref: '#/components/schemas/PatchBooksMetadataV1B'
                required: true
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/opds/v2/series/{id}":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdsseriesByIdV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "tag"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/search":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdssearchV2"
            parameters:
                - name: "query"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/readlists/{id}":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdsreadlistByIdV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}/series/latest":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdSeriesLatestV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/series/latest":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesSeriesLatestV2"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/readlists":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesReadlistsV2"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}/readlists":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdReadlistsV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}/on-deck":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdOnDeckV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/on-deck":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesOnDeckV2"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}/keep-reading":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdKeepReadingV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/keep-reading":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesKeepReadingV2"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/collections":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesCollectionsV2"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}/collections":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdCollectionsV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/browse":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesBrowseV2"
            parameters:
                - name: "publisher"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}/browse":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdBrowseV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "publisher"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/books/latest":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesBooksLatestV2"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}/books/latest":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdBooksLatestV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries/{id}":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibraryByIdV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/libraries":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdslibrariesV2"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/catalog":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdscatalogV2"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v2/collections/{id}":
        get:
            tags:
                - "opds-2-controller"
            operationId: "getOpdscollectionByIdV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/opds+json":
                            schema: {"$ref": "#/components/schemas/FeedDto"}
    "/opds/v1.2/series":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12SeriesV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "publisher"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/series/{id}":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12SeriesByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/series/latest":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12SeriesLatestV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/search":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12SearchV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpenSearchDescription"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpenSearchDescription"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpenSearchDescription"}
    "/opds/v1.2/readlists":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12ReadlistsV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/readlists/{id}":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12ReadlistByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/publishers":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12PublishersV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/ondeck":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12OndeckV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/libraries":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12LibrariesV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/libraries/{id}":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12LibraryByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/keep-reading":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12KeepReadingV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/collections":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12CollectionsV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/collections/{id}":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12CollectionByIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/catalog":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12CatalogV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/opds/v1.2/books/{bookId}/thumbnail/small":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12BookByBookIdThumbnailSmallV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/opds/v1.2/books/{bookId}/thumbnail":
        get:
            tags:
                - "opds-common-controller"
            operationId: "getOpdsV12BookByBookIdThumbnailV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/opds/v2/books/{bookId}/thumbnail":
        get:
            tags:
                - "opds-common-controller"
            operationId: "getOpdsbookByBookIdThumbnailV2"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/opds/v1.2/books/{bookId}/pages/{pageNumber}":
        get:
            tags:
                - "book-controller"
            operationId: "getOpdsV12BookByBookIdPageByPageNumberV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "pageNumber"
                  in: "path"
                  required: true
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "convert"
                  in: "query"
                  description: "Convert the image to the provided format."
                  required: false
                  schema:
                    type: "string"
                    enum:
                        - "jpeg"
                        - "png"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/*":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/opds/v1.2/books/latest":
        get:
            tags:
                - "opds-controller"
            operationId: "getOpdsV12BooksLatestV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/atom+xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "application/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
                        "text/xml":
                            schema: {"$ref": "#/components/schemas/OpdsFeed"}
    "/api/v2/users/{id}/authentication-activity/latest":
        get:
            tags:
                - "user-controller"
            operationId: "getUserByIdAuthenticationActivityLatestV2"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/AuthenticationActivityDto"}
    "/api/v2/users/me":
        get:
            tags:
                - "user-controller"
            operationId: "getUsersMeV2"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/UserDto"}
    "/api/v2/users/me/authentication-activity":
        get:
            tags:
                - "user-controller"
            operationId: "getUsersMeAuthenticationActivityV2"
            parameters:
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                    default: 0
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                    default: 20
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageAuthenticationActivityDto"}
    "/api/v2/users/authentication-activity":
        get:
            tags:
                - "user-controller"
            operationId: "getUsersAuthenticationActivityV2"
            parameters:
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                    default: 0
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                    default: 20
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageAuthenticationActivityDto"}
    "/api/v2/authors":
        get:
            tags:
                - "referential-controller"
            operationId: "getAuthorsV2"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "role"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "series_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "readlist_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageAuthorDto"}
    "/api/v1/transient-books/{id}/pages/{pageNumber}":
        get:
            tags:
                - "transient-books-controller"
            operationId: "getTransientBookByIdPageByPageNumberV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "pageNumber"
                  in: "path"
                  required: true
                  schema:
                    type: "integer"
                    format: "int32"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "*/*":
                            schema:
                                $ref: '#/components/schemas/GetTransientBookByIDPageByPageNumberV1R200'
    "/api/v1/tags":
        get:
            tags:
                - "referential-controller"
            operationId: "getTagsV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetTagsV1R200'
    "/api/v1/tags/series":
        get:
            tags:
                - "referential-controller"
            operationId: "getTagsSeriesV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetTagsSeriesV1R200'
    "/api/v1/tags/book":
        get:
            tags:
                - "referential-controller"
            operationId: "getTagsBookV1"
            parameters:
                - name: "series_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "readlist_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetTagsBookV1R200'
    "/api/v1/sharing-labels":
        get:
            tags:
                - "referential-controller"
            operationId: "getSharingLabelsV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetSharingLabelsV1R200'
    "/api/v1/series":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "ENDED"
                            - "ONGOING"
                            - "ABANDONED"
                            - "HIATUS"
                - name: "read_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNREAD"
                            - "READ"
                            - "IN_PROGRESS"
                - name: "publisher"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "language"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "genre"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "tag"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "age_rating"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "release_year"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "sharing_label"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "complete"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "oneshot"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "search_regex"
                  in: "query"
                  description: "Search by regex criteria, in the form: regex,field. Supported fields are TITLE and TITLE_SORT."
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "author"
                  in: "query"
                  description: "Author criteria in the format: name,role. Multiple author criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageSeriesDto"}
    "/api/v1/series/{seriesId}":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SeriesDto"}
    "/api/v1/series/{seriesId}/thumbnails/{thumbnailId}":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
        delete:
            tags:
                - "series-controller"
            operationId: "deleteSeriesBySeriesIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/series/{seriesId}/thumbnail":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdThumbnailV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/series/{seriesId}/file":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdFileV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/octet-stream":
                            schema: {"$ref": "#/components/schemas/StreamingResponseBody"}
        delete:
            tags:
                - "series-controller"
            operationId: "deleteSeriesBySeriesIdFileV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/series/{seriesId}/collections":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdCollectionsV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetSeriesBySeriesIDCollectionsV1R200'
    "/api/v1/series/{seriesId}/books":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesBySeriesIdBooksV1"
            parameters:
                - name: "seriesId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "media_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNKNOWN"
                            - "ERROR"
                            - "READY"
                            - "UNSUPPORTED"
                            - "OUTDATED"
                - name: "read_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNREAD"
                            - "READ"
                            - "IN_PROGRESS"
                - name: "tag"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "author"
                  in: "query"
                  description: "Author criteria in the format: name,role. Multiple author criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageBookDto"}
    "/api/v1/series/updated":
        get:
            tags:
                - "series-controller"
            description: "Return recently updated series, but not newly added ones."
            operationId: "getSeriesUpdatedV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "oneshot"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageSeriesDto"}
    "/api/v1/series/release-dates":
        get:
            tags:
                - "referential-controller"
            operationId: "getSeriesReleaseDatesV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetSeriesReleaseDatesV1R200'
    "/api/v1/series/new":
        get:
            tags:
                - "series-controller"
            description: "Return newly added series."
            operationId: "getSeriesNewV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "oneshot"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageSeriesDto"}
    "/api/v1/series/latest":
        get:
            tags:
                - "series-controller"
            description: "Return recently added or updated series."
            operationId: "getSeriesLatestV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "oneshot"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageSeriesDto"}
    "/api/v1/series/alphabetical-groups":
        get:
            tags:
                - "series-controller"
            operationId: "getSeriesAlphabeticalGroupsV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "ENDED"
                            - "ONGOING"
                            - "ABANDONED"
                            - "HIATUS"
                - name: "read_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNREAD"
                            - "READ"
                            - "IN_PROGRESS"
                - name: "publisher"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "language"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "genre"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "tag"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "age_rating"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "release_year"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "sharing_label"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "complete"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "oneshot"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "search_regex"
                  in: "query"
                  description: "Search by regex criteria, in the form: regex,field. Supported fields are TITLE and TITLE_SORT."
                  schema:
                    type: "string"
                - name: "author"
                  in: "query"
                  description: "Author criteria in the format: name,role. Multiple author criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetSeriesAlphabeticalGroupsV1R200'
    "/api/v1/readlists/{id}/thumbnails/{thumbnailId}":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
        delete:
            tags:
                - "read-list-controller"
            operationId: "deleteReadlistByIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/readlists/{id}/thumbnail":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdThumbnailV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/readlists/{id}/file":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdFileV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/octet-stream":
                            schema: {"$ref": "#/components/schemas/StreamingResponseBody"}
    "/api/v1/readlists/{id}/books":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdBooksV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "read_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNREAD"
                            - "READ"
                            - "IN_PROGRESS"
                - name: "tag"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "media_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNKNOWN"
                            - "ERROR"
                            - "READY"
                            - "UNSUPPORTED"
                            - "OUTDATED"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "author"
                  in: "query"
                  description: "Author criteria in the format: name,role. Multiple author criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageBookDto"}
    "/api/v1/readlists/{id}/books/{bookId}/previous":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdBookByBookIdPreviousV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BookDto"}
    "/api/v1/readlists/{id}/books/{bookId}/next":
        get:
            tags:
                - "read-list-controller"
            operationId: "getReadlistByIdBookByBookIdNextV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BookDto"}
    "/api/v1/publishers":
        get:
            tags:
                - "referential-controller"
            operationId: "getPublishersV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetPublishersV1R200'
    "/api/v1/page-hashes/{pageHash}":
        get:
            tags:
                - "page-hash-controller"
            operationId: "getPageHashByPageHashV1"
            parameters:
                - name: "pageHash"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PagePageHashMatchDto"}
    "/api/v1/page-hashes/{pageHash}/thumbnail":
        get:
            tags:
                - "page-hash-controller"
            operationId: "getPageHashByPageHashThumbnailV1"
            parameters:
                - name: "pageHash"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/page-hashes/unknown":
        get:
            tags:
                - "page-hash-controller"
            operationId: "getPageHashesUnknownV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PagePageHashUnknownDto"}
    "/api/v1/page-hashes/unknown/{pageHash}/thumbnail":
        get:
            tags:
                - "page-hash-controller"
            operationId: "getPageHashesUnknownByPageHashThumbnailV1"
            parameters:
                - name: "pageHash"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "resize"
                  in: "query"
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/login/set-cookie":
        get:
            tags:
                - "login-controller"
            operationId: "getLoginSetCookieV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "204":
                    description: "No Content"
    "/api/v1/languages":
        get:
            tags:
                - "referential-controller"
            operationId: "getLanguagesV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetLanguagesV1R200'
    "/api/v1/history":
        get:
            tags:
                - "historical-event-controller"
            operationId: "getHistoryV1"
            parameters:
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageHistoricalEventDto"}
    "/api/v1/genres":
        get:
            tags:
                - "referential-controller"
            operationId: "getGenresV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetGenresV1R200'
    "/api/v1/collections/{id}/thumbnails/{thumbnailId}":
        get:
            tags:
                - "series-collection-controller"
            operationId: "getCollectionByIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
        delete:
            tags:
                - "series-collection-controller"
            operationId: "deleteCollectionByIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/collections/{id}/thumbnail":
        get:
            tags:
                - "series-collection-controller"
            operationId: "getCollectionByIdThumbnailV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/collections/{id}/series":
        get:
            tags:
                - "series-collection-controller"
            operationId: "getCollectionByIdSeriesV1"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "ENDED"
                            - "ONGOING"
                            - "ABANDONED"
                            - "HIATUS"
                - name: "read_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNREAD"
                            - "READ"
                            - "IN_PROGRESS"
                - name: "publisher"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "language"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "genre"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "tag"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "age_rating"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "release_years"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "deleted"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "complete"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "author"
                  in: "query"
                  description: "Author criteria in the format: name,role. Multiple author criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageSeriesDto"}
    "/api/v1/books":
        get:
            tags:
                - "book-controller"
            operationId: "getBooksV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "media_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNKNOWN"
                            - "ERROR"
                            - "READY"
                            - "UNSUPPORTED"
                            - "OUTDATED"
                - name: "read_status"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "UNREAD"
                            - "READ"
                            - "IN_PROGRESS"
                - name: "released_after"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                    format: "date"
                - name: "tag"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageBookDto"}
    "/api/v1/books/{bookId}":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BookDto"}
    "/api/v1/books/{bookId}/thumbnails/{thumbnailId}":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
        delete:
            tags:
                - "book-controller"
            operationId: "deleteBookByBookIdThumbnailByThumbnailIdV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "thumbnailId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/api/v1/books/{bookId}/thumbnail":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdThumbnailV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/books/{bookId}/readlists":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdReadlistsV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetBookByBookIDReadlistsV1R200'
    "/api/v1/books/{bookId}/previous":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdPreviousV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BookDto"}
    "/api/v1/books/{bookId}/pages":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdPagesV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetBookByBookIDPagesV1R200'
    "/api/v1/books/{bookId}/pages/{pageNumber}":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdPageByPageNumberV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "pageNumber"
                  in: "path"
                  required: true
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "convert"
                  in: "query"
                  description: "Convert the image to the provided format."
                  required: false
                  schema:
                    type: "string"
                    enum:
                        - "jpeg"
                        - "png"
                - name: "zero_based"
                  in: "query"
                  description: "If set to true, pages will start at index 0. If set to false, pages will start at index 1."
                  required: false
                  schema:
                    type: "boolean"
                    default: false
                - name: "Accept"
                  in: "header"
                  description: "Some very limited server driven content negotiation is handled. If a book is a PDF book, and the Accept header contains 'application/pdf' as a more specific type than other 'image/' types, a raw PDF page will be returned."
                  required: false
                  schema:
                    type: "array"
                    items: {"$ref": "#/components/schemas/MediaType"}
            responses:
                default:
                    description: "default response"
                    content:
                        "image/*":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/books/{bookId}/pages/{pageNumber}/thumbnail":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdPageByPageNumberThumbnailV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "pageNumber"
                  in: "path"
                  required: true
                  schema:
                    type: "integer"
                    format: "int32"
            responses:
                default:
                    description: "default response"
                    content:
                        "image/jpeg":
                            schema:
                                type: "string"
                                format: "binary"
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
    "/api/v1/books/{bookId}/pages/{pageNumber}/raw":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdPageByPageNumberRawV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
                - name: "pageNumber"
                  in: "path"
                  required: true
                  schema:
                    type: "integer"
                    format: "int32"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "*/*":
                            schema:
                                $ref: '#/components/schemas/GetBookByBookIDPageByPageNumberRawV1R200'
    "/api/v1/books/{bookId}/next":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdNextV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/BookDto"}
    "/api/v1/books/{bookId}/manifest":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdManifestV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/webpub+json":
                            schema: {"$ref": "#/components/schemas/WPPublicationDto"}
                        "application/divina+json":
                            schema: {"$ref": "#/components/schemas/WPPublicationDto"}
    "/api/v1/books/{bookId}/manifest/pdf":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdManifestPdfV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/webpub+json":
                            schema: {"$ref": "#/components/schemas/WPPublicationDto"}
    "/api/v1/books/{bookId}/manifest/divina":
        get:
            tags:
                - "book-controller"
            operationId: "getBookByBookIdManifestDivinaV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/divina+json":
                            schema: {"$ref": "#/components/schemas/WPPublicationDto"}
    "/api/v1/books/{bookId}/file":
        get:
            tags:
                - "book-controller"
            description: "Download the book file."
            operationId: "getBookByBookIdFileV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/octet-stream":
                            schema: {"$ref": "#/components/schemas/StreamingResponseBody"}
        delete:
            tags:
                - "book-controller"
            operationId: "deleteBookByBookIdFileV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "202":
                    description: "Accepted"
    "/opds/v1.2/books/{bookId}/file/*":
        get:
            tags:
                - "book-controller"
            description: "Download the book file."
            operationId: "getOpdsV12BookByBookIdFileV1"
            parameters:
                - name: "bookId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/octet-stream":
                            schema: {"$ref": "#/components/schemas/StreamingResponseBody"}
    "/api/v1/books/ondeck":
        get:
            tags:
                - "book-controller"
            description: "Return first unread book of series with at least one book read and no books in progress."
            operationId: "getBooksOndeckV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "array"
                    items:
                        type: "string"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageBookDto"}
    "/api/v1/books/latest":
        get:
            tags:
                - "book-controller"
            description: "Return newly added or updated books."
            operationId: "getBooksLatestV1"
            parameters:
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageBookDto"}
    "/api/v1/books/duplicates":
        get:
            tags:
                - "book-controller"
            operationId: "getBooksDuplicatesV1"
            parameters:
                - name: "unpaged"
                  in: "query"
                  required: false
                  schema:
                    type: "boolean"
                - name: "page"
                  in: "query"
                  description: "Zero-based page index (0..N)"
                  schema:
                    type: "integer"
                - name: "size"
                  in: "query"
                  description: "The size of the page to be returned"
                  schema:
                    type: "integer"
                - name: "sort"
                  in: "query"
                  description: "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                  schema:
                    type: "array"
                    items:
                        type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PageBookDto"}
    "/api/v1/authors":
        get:
            tags:
                - "referential-controller"
            operationId: "getAuthorsV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                    default: ""
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "series_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetAuthorsV1R200'
    "/api/v1/authors/roles":
        get:
            tags:
                - "referential-controller"
            operationId: "getAuthorsRolesV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetAuthorsRolesV1R200'
    "/api/v1/authors/names":
        get:
            tags:
                - "referential-controller"
            operationId: "getAuthorsNamesV1"
            parameters:
                - name: "search"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                    default: ""
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetAuthorsNamesV1R200'
    "/api/v1/age-ratings":
        get:
            tags:
                - "referential-controller"
            operationId: "getAgeRatingsV1"
            parameters:
                - name: "library_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
                - name: "collection_id"
                  in: "query"
                  required: false
                  schema:
                    type: "string"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetAgeRatingsV1R200'
    "/api/v1/tasks":
        delete:
            tags:
                - "task-controller"
            operationId: "deleteTasksV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/DeleteTasksV1R200'
    "/api/v1/oauth2/providers":
        get:
            tags:
                - "o-auth-2-controller"
            operationId: "getOAuth2ProvidersV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/GetOauth2ProvIDErsV1R200'
        put:
            tags:
                - "o-auth-2-controller"
            operationId: "putOAuth2ProvidersV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/PutOauth2ProvIDErsV1R200'
        post:
            tags:
                - "o-auth-2-controller"
            operationId: "postOAuth2ProvidersV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/PostOauth2ProvIDErsV1R200'
        delete:
            tags:
                - "o-auth-2-controller"
            operationId: "deleteOAuth2ProvidersV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/DeleteOauth2ProvIDErsV1R200'
        options:
            tags:
                - "o-auth-2-controller"
            operationId: "optionsOAuth2ProvidersV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/OptionsOauth2ProvIDErsV1R200'
        head:
            tags:
                - "o-auth-2-controller"
            operationId: "headOAuth2ProvidersV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/HeadOauth2ProvIDErsV1R200'
        patch:
            tags:
                - "o-auth-2-controller"
            operationId: "patchOAuth2ProvidersV1"
            responses:
                "400":
                    description: "Bad Request"
                    content:
                        "*/*":
                            schema: {"$ref": "#/components/schemas/ValidationErrorResponse"}
                "200":
                    description: "OK"
                    content:
                        "application/json":
                            schema:
                                $ref: '#/components/schemas/PatchOauth2ProvIDErsV1R200'
components:
    schemas:
        "ValidationErrorResponse":
            required:
                - "violations"
            type: "object"
            properties:
                "violations":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Violation"}
            title: ValidationErrorResponse
        "Violation":
            type: "object"
            properties:
                "fieldName":
                    type: "string"
                "message":
                    type: "string"
            title: Violation
        "TachiyomiReadProgressUpdateV2Dto":
            required:
                - "lastBookNumberSortRead"
            type: "object"
            properties:
                "lastBookNumberSortRead":
                    type: "number"
                    format: "float"
            title: TachiyomiReadProgressUpdateV2Dto
        "TachiyomiReadProgressUpdateDto":
            required:
                - "lastBookRead"
            type: "object"
            properties:
                "lastBookRead":
                    type: "integer"
                    format: "int32"
            title: TachiyomiReadProgressUpdateDto
        "PageHashCreationDto":
            required:
                - "action"
                - "hash"
            type: "object"
            properties:
                "hash":
                    type: "string"
                "size":
                    type: "integer"
                    format: "int64"
                "action":
                    $ref: '#/components/schemas/ActionEnum'
            title: PageHashCreationDto
        "LibraryUpdateDto":
            type: "object"
            properties:
                "name":
                    type: "string"
                "root":
                    type: "string"
                "importComicInfoBook":
                    type: "boolean"
                "importComicInfoSeries":
                    type: "boolean"
                "importComicInfoCollection":
                    type: "boolean"
                "importComicInfoReadList":
                    type: "boolean"
                "importComicInfoSeriesAppendVolume":
                    type: "boolean"
                "importEpubBook":
                    type: "boolean"
                "importEpubSeries":
                    type: "boolean"
                "importMylarSeries":
                    type: "boolean"
                "importLocalArtwork":
                    type: "boolean"
                "importBarcodeIsbn":
                    type: "boolean"
                "scanForceModifiedTime":
                    type: "boolean"
                "scanInterval":
                    $ref: '#/components/schemas/ScanIntervalEnum'
                "scanOnStartup":
                    type: "boolean"
                "scanCbx":
                    type: "boolean"
                "scanPdf":
                    type: "boolean"
                "scanEpub":
                    type: "boolean"
                "repairExtensions":
                    type: "boolean"
                "convertToCbz":
                    type: "boolean"
                "emptyTrashAfterScan":
                    type: "boolean"
                "seriesCover":
                    $ref: '#/components/schemas/SeriesCoverEnum'
                "hashFiles":
                    type: "boolean"
                "hashPages":
                    type: "boolean"
                "analyzeDimensions":
                    type: "boolean"
                "oneshotsDirectory":
                    type: "string"
                "scanDirectoryExclusions":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
            description: "Fields to update. You can omit fields you don't want to update."
            title: LibraryUpdateDto
        "UserCreationDto":
            required:
                - "email"
                - "password"
                - "roles"
            type: "object"
            properties:
                "email":
                    type: "string"
                "password":
                    type: "string"
                "roles":
                    type: "array"
                    items:
                        type: "string"
            title: UserCreationDto
        "AgeRestrictionDto":
            required:
                - "age"
                - "restriction"
            type: "object"
            properties:
                "age":
                    type: "integer"
                    format: "int32"
                "restriction":
                    $ref: '#/components/schemas/RestrictionEnum'
            title: AgeRestrictionDto
        "UserDto":
            required:
                - "email"
                - "id"
                - "labelsAllow"
                - "labelsExclude"
                - "roles"
                - "sharedAllLibraries"
                - "sharedLibrariesIds"
            type: "object"
            properties:
                "id":
                    type: "string"
                "email":
                    type: "string"
                "roles":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "sharedAllLibraries":
                    type: "boolean"
                "sharedLibrariesIds":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "labelsAllow":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "labelsExclude":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "ageRestriction": {"$ref": "#/components/schemas/AgeRestrictionDto"}
            title: UserDto
        "ScanRequestDto":
            required:
                - "path"
            type: "object"
            properties:
                "path":
                    type: "string"
            title: ScanRequestDto
        "PageDto":
            required:
                - "fileName"
                - "mediaType"
                - "number"
                - "size"
            type: "object"
            properties:
                "number":
                    type: "integer"
                    format: "int32"
                "fileName":
                    type: "string"
                "mediaType":
                    type: "string"
                "width":
                    type: "integer"
                    format: "int32"
                "height":
                    type: "integer"
                    format: "int32"
                "sizeBytes":
                    type: "integer"
                    format: "int64"
                "size":
                    type: "string"
            title: PageDto
        "TransientBookDto":
            required:
                - "comment"
                - "fileLastModified"
                - "files"
                - "id"
                - "mediaType"
                - "name"
                - "pages"
                - "size"
                - "sizeBytes"
                - "status"
                - "url"
            type: "object"
            properties:
                "id":
                    type: "string"
                "name":
                    type: "string"
                "url":
                    type: "string"
                "fileLastModified":
                    type: "string"
                    format: "date-time"
                "sizeBytes":
                    type: "integer"
                    format: "int64"
                "size":
                    type: "string"
                "status":
                    type: "string"
                "mediaType":
                    type: "string"
                "pages":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PageDto"}
                "files":
                    type: "array"
                    items:
                        type: "string"
                "comment":
                    type: "string"
            title: TransientBookDto
        "ThumbnailSeriesDto":
            required:
                - "fileSize"
                - "height"
                - "id"
                - "mediaType"
                - "selected"
                - "seriesId"
                - "type"
                - "width"
            type: "object"
            properties:
                "id":
                    type: "string"
                "seriesId":
                    type: "string"
                "type":
                    type: "string"
                "selected":
                    type: "boolean"
                "mediaType":
                    type: "string"
                "fileSize":
                    type: "integer"
                    format: "int64"
                "width":
                    type: "integer"
                    format: "int32"
                "height":
                    type: "integer"
                    format: "int32"
            title: ThumbnailSeriesDto
        "ReadListCreationDto":
            required:
                - "bookIds"
                - "name"
                - "ordered"
                - "summary"
            type: "object"
            properties:
                "name":
                    type: "string"
                "summary":
                    type: "string"
                "ordered":
                    type: "boolean"
                "bookIds":
                    type: "array"
                    items:
                        type: "string"
            title: ReadListCreationDto
        "ReadListDto":
            required:
                - "bookIds"
                - "createdDate"
                - "filtered"
                - "id"
                - "lastModifiedDate"
                - "name"
                - "ordered"
                - "summary"
            type: "object"
            properties:
                "id":
                    type: "string"
                "name":
                    type: "string"
                "summary":
                    type: "string"
                "ordered":
                    type: "boolean"
                "bookIds":
                    type: "array"
                    items:
                        type: "string"
                "createdDate":
                    type: "string"
                    format: "date-time"
                "lastModifiedDate":
                    type: "string"
                    format: "date-time"
                "filtered":
                    type: "boolean"
            title: ReadListDto
        "ThumbnailReadListDto":
            required:
                - "fileSize"
                - "height"
                - "id"
                - "mediaType"
                - "readListId"
                - "selected"
                - "type"
                - "width"
            type: "object"
            properties:
                "id":
                    type: "string"
                "readListId":
                    type: "string"
                "type":
                    type: "string"
                "selected":
                    type: "boolean"
                "mediaType":
                    type: "string"
                "fileSize":
                    type: "integer"
                    format: "int64"
                "width":
                    type: "integer"
                    format: "int32"
                "height":
                    type: "integer"
                    format: "int32"
            title: ThumbnailReadListDto
        "ReadListMatchDto":
            required:
                - "errorCode"
                - "name"
            type: "object"
            properties:
                "name":
                    type: "string"
                "errorCode":
                    type: "string"
            title: ReadListMatchDto
        "ReadListRequestBookDto":
            required:
                - "number"
                - "series"
            type: "object"
            properties:
                "series":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "number":
                    type: "string"
            title: ReadListRequestBookDto
        "ReadListRequestBookMatchBookDto":
            required:
                - "bookId"
                - "number"
                - "title"
            type: "object"
            properties:
                "bookId":
                    type: "string"
                "number":
                    type: "string"
                "title":
                    type: "string"
            title: ReadListRequestBookMatchBookDto
        "ReadListRequestBookMatchDto":
            required:
                - "books"
                - "series"
            type: "object"
            properties:
                "series": {"$ref": "#/components/schemas/ReadListRequestBookMatchSeriesDto"}
                "books":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ReadListRequestBookMatchBookDto"}
            title: ReadListRequestBookMatchDto
        "ReadListRequestBookMatchSeriesDto":
            required:
                - "seriesId"
                - "title"
            type: "object"
            properties:
                "seriesId":
                    type: "string"
                "title":
                    type: "string"
                "releaseDate":
                    type: "string"
                    format: "date"
            title: ReadListRequestBookMatchSeriesDto
        "ReadListRequestBookMatchesDto":
            required:
                - "matches"
                - "request"
            type: "object"
            properties:
                "request": {"$ref": "#/components/schemas/ReadListRequestBookDto"}
                "matches":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ReadListRequestBookMatchDto"}
            title: ReadListRequestBookMatchesDto
        "ReadListRequestMatchDto":
            required:
                - "errorCode"
                - "readListMatch"
                - "requests"
            type: "object"
            properties:
                "readListMatch": {"$ref": "#/components/schemas/ReadListMatchDto"}
                "requests":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ReadListRequestBookMatchesDto"}
                "errorCode":
                    type: "string"
            title: ReadListRequestMatchDto
        "PageHashMatchDto":
            required:
                - "bookId"
                - "fileName"
                - "fileSize"
                - "mediaType"
                - "pageNumber"
                - "url"
            type: "object"
            properties:
                "bookId":
                    type: "string"
                "url":
                    type: "string"
                "pageNumber":
                    type: "integer"
                    format: "int32"
                "fileName":
                    type: "string"
                "fileSize":
                    type: "integer"
                    format: "int64"
                "mediaType":
                    type: "string"
            title: PageHashMatchDto
        "LibraryCreationDto":
            required:
                - "analyzeDimensions"
                - "convertToCbz"
                - "emptyTrashAfterScan"
                - "hashFiles"
                - "hashPages"
                - "importBarcodeIsbn"
                - "importComicInfoBook"
                - "importComicInfoCollection"
                - "importComicInfoReadList"
                - "importComicInfoSeries"
                - "importComicInfoSeriesAppendVolume"
                - "importEpubBook"
                - "importEpubSeries"
                - "importLocalArtwork"
                - "importMylarSeries"
                - "name"
                - "repairExtensions"
                - "root"
                - "scanCbx"
                - "scanDirectoryExclusions"
                - "scanEpub"
                - "scanForceModifiedTime"
                - "scanInterval"
                - "scanOnStartup"
                - "scanPdf"
                - "seriesCover"
            type: "object"
            properties:
                "name":
                    type: "string"
                "root":
                    type: "string"
                "importComicInfoBook":
                    type: "boolean"
                "importComicInfoSeries":
                    type: "boolean"
                "importComicInfoCollection":
                    type: "boolean"
                "importComicInfoReadList":
                    type: "boolean"
                "importComicInfoSeriesAppendVolume":
                    type: "boolean"
                "importEpubBook":
                    type: "boolean"
                "importEpubSeries":
                    type: "boolean"
                "importMylarSeries":
                    type: "boolean"
                "importLocalArtwork":
                    type: "boolean"
                "importBarcodeIsbn":
                    type: "boolean"
                "scanForceModifiedTime":
                    type: "boolean"
                "scanInterval":
                    $ref: '#/components/schemas/ScanIntervalEnum'
                "scanOnStartup":
                    type: "boolean"
                "scanCbx":
                    type: "boolean"
                "scanPdf":
                    type: "boolean"
                "scanEpub":
                    type: "boolean"
                "scanDirectoryExclusions":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "repairExtensions":
                    type: "boolean"
                "convertToCbz":
                    type: "boolean"
                "emptyTrashAfterScan":
                    type: "boolean"
                "seriesCover":
                    $ref: '#/components/schemas/SeriesCoverEnum'
                "hashFiles":
                    type: "boolean"
                "hashPages":
                    type: "boolean"
                "analyzeDimensions":
                    type: "boolean"
                "oneshotsDirectory":
                    type: "string"
            title: LibraryCreationDto
        "LibraryDto":
            required:
                - "analyzeDimensions"
                - "convertToCbz"
                - "emptyTrashAfterScan"
                - "hashFiles"
                - "hashPages"
                - "id"
                - "importBarcodeIsbn"
                - "importComicInfoBook"
                - "importComicInfoCollection"
                - "importComicInfoReadList"
                - "importComicInfoSeries"
                - "importComicInfoSeriesAppendVolume"
                - "importEpubBook"
                - "importEpubSeries"
                - "importLocalArtwork"
                - "importMylarSeries"
                - "name"
                - "repairExtensions"
                - "root"
                - "scanCbx"
                - "scanDirectoryExclusions"
                - "scanEpub"
                - "scanForceModifiedTime"
                - "scanInterval"
                - "scanOnStartup"
                - "scanPdf"
                - "seriesCover"
                - "unavailable"
            type: "object"
            properties:
                "id":
                    type: "string"
                "name":
                    type: "string"
                "root":
                    type: "string"
                "importComicInfoBook":
                    type: "boolean"
                "importComicInfoSeries":
                    type: "boolean"
                "importComicInfoCollection":
                    type: "boolean"
                "importComicInfoReadList":
                    type: "boolean"
                "importComicInfoSeriesAppendVolume":
                    type: "boolean"
                "importEpubBook":
                    type: "boolean"
                "importEpubSeries":
                    type: "boolean"
                "importMylarSeries":
                    type: "boolean"
                "importLocalArtwork":
                    type: "boolean"
                "importBarcodeIsbn":
                    type: "boolean"
                "scanForceModifiedTime":
                    type: "boolean"
                "scanInterval":
                    $ref: '#/components/schemas/ScanIntervalEnum'
                "scanOnStartup":
                    type: "boolean"
                "scanCbx":
                    type: "boolean"
                "scanPdf":
                    type: "boolean"
                "scanEpub":
                    type: "boolean"
                "scanDirectoryExclusions":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "repairExtensions":
                    type: "boolean"
                "convertToCbz":
                    type: "boolean"
                "emptyTrashAfterScan":
                    type: "boolean"
                "seriesCover":
                    $ref: '#/components/schemas/SeriesCoverEnum'
                "hashFiles":
                    type: "boolean"
                "hashPages":
                    type: "boolean"
                "analyzeDimensions":
                    type: "boolean"
                "oneshotsDirectory":
                    type: "string"
                "unavailable":
                    type: "boolean"
            title: LibraryDto
        "DirectoryRequestDto":
            required:
                - "path"
            type: "object"
            properties:
                "path":
                    type: "string"
            title: DirectoryRequestDto
        "DirectoryListingDto":
            required:
                - "directories"
            type: "object"
            properties:
                "parent":
                    type: "string"
                "directories":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PathDto"}
            title: DirectoryListingDto
        "PathDto":
            required:
                - "name"
                - "path"
                - "type"
            type: "object"
            properties:
                "type":
                    type: "string"
                "name":
                    type: "string"
                "path":
                    type: "string"
            title: PathDto
        "CollectionCreationDto":
            required:
                - "name"
                - "ordered"
                - "seriesIds"
            type: "object"
            properties:
                "name":
                    type: "string"
                "ordered":
                    type: "boolean"
                "seriesIds":
                    type: "array"
                    items:
                        type: "string"
            title: CollectionCreationDto
        "CollectionDto":
            required:
                - "createdDate"
                - "filtered"
                - "id"
                - "lastModifiedDate"
                - "name"
                - "ordered"
                - "seriesIds"
            type: "object"
            properties:
                "id":
                    type: "string"
                "name":
                    type: "string"
                "ordered":
                    type: "boolean"
                "seriesIds":
                    type: "array"
                    items:
                        type: "string"
                "createdDate":
                    type: "string"
                    format: "date-time"
                "lastModifiedDate":
                    type: "string"
                    format: "date-time"
                "filtered":
                    type: "boolean"
            title: CollectionDto
        "ThumbnailSeriesCollectionDto":
            required:
                - "collectionId"
                - "fileSize"
                - "height"
                - "id"
                - "mediaType"
                - "selected"
                - "type"
                - "width"
            type: "object"
            properties:
                "id":
                    type: "string"
                "collectionId":
                    type: "string"
                "type":
                    type: "string"
                "selected":
                    type: "boolean"
                "mediaType":
                    type: "string"
                "fileSize":
                    type: "integer"
                    format: "int64"
                "width":
                    type: "integer"
                    format: "int32"
                "height":
                    type: "integer"
                    format: "int32"
            title: ThumbnailSeriesCollectionDto
        "ThumbnailBookDto":
            required:
                - "bookId"
                - "fileSize"
                - "height"
                - "id"
                - "mediaType"
                - "selected"
                - "type"
                - "width"
            type: "object"
            properties:
                "id":
                    type: "string"
                "bookId":
                    type: "string"
                "type":
                    type: "string"
                "selected":
                    type: "boolean"
                "mediaType":
                    type: "string"
                "fileSize":
                    type: "integer"
                    format: "int64"
                "width":
                    type: "integer"
                    format: "int32"
                "height":
                    type: "integer"
                    format: "int32"
            title: ThumbnailBookDto
        "BookImportBatchDto":
            required:
                - "books"
                - "copyMode"
            type: "object"
            properties:
                "books":
                    type: "array"
                    items: {"$ref": "#/components/schemas/BookImportDto"}
                "copyMode":
                    $ref: '#/components/schemas/CopyModeEnum'
            title: BookImportBatchDto
        "BookImportDto":
            required:
                - "seriesId"
                - "sourceFile"
            type: "object"
            properties:
                "sourceFile":
                    type: "string"
                "seriesId":
                    type: "string"
                "upgradeBookId":
                    type: "string"
                "destinationName":
                    type: "string"
            title: BookImportDto
        "AgeRestrictionUpdateDto":
            required:
                - "age"
                - "restriction"
            type: "object"
            properties:
                "age":
                    type: "integer"
                    format: "int32"
                "restriction":
                    $ref: '#/components/schemas/RestrictionEnum'
            title: AgeRestrictionUpdateDto
        "SharedLibrariesUpdateDto":
            required:
                - "all"
                - "libraryIds"
            type: "object"
            properties:
                "all":
                    type: "boolean"
                "libraryIds":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
            title: SharedLibrariesUpdateDto
        "UserUpdateDto":
            type: "object"
            properties:
                "roles":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "labelsAllow":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "labelsExclude":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "ageRestriction": {"$ref": "#/components/schemas/AgeRestrictionUpdateDto"}
                "sharedLibraries": {"$ref": "#/components/schemas/SharedLibrariesUpdateDto"}
            title: UserUpdateDto
        "PasswordUpdateDto":
            required:
                - "password"
            type: "object"
            properties:
                "password":
                    type: "string"
            title: PasswordUpdateDto
        "SettingsUpdateDto":
            type: "object"
            properties:
                "deleteEmptyCollections":
                    type: "boolean"
                "deleteEmptyReadLists":
                    type: "boolean"
                "rememberMeDurationDays":
                    type: "integer"
                    format: "int64"
                "renewRememberMeKey":
                    type: "boolean"
                "thumbnailSize":
                    $ref: '#/components/schemas/ThumbnailSizeEnum'
                "taskPoolSize":
                    type: "integer"
                    format: "int32"
            title: SettingsUpdateDto
        "AlternateTitleUpdateDto":
            required:
                - "label"
                - "title"
            type: "object"
            properties:
                "label":
                    type: "string"
                "title":
                    type: "string"
            title: AlternateTitleUpdateDto
        "SeriesMetadataUpdateDto":
            type: "object"
            properties:
                "status":
                    $ref: '#/components/schemas/StatusEnum'
                "statusLock":
                    type: "boolean"
                "title":
                    type: "string"
                "titleLock":
                    type: "boolean"
                "titleSort":
                    type: "string"
                "titleSortLock":
                    type: "boolean"
                "summary":
                    type: "string"
                "summaryLock":
                    type: "boolean"
                "publisher":
                    type: "string"
                "publisherLock":
                    type: "boolean"
                "readingDirectionLock":
                    type: "boolean"
                "ageRatingLock":
                    type: "boolean"
                "language":
                    type: "string"
                "languageLock":
                    type: "boolean"
                "genresLock":
                    type: "boolean"
                "tagsLock":
                    type: "boolean"
                "totalBookCountLock":
                    type: "boolean"
                "sharingLabelsLock":
                    type: "boolean"
                "linksLock":
                    type: "boolean"
                "alternateTitlesLock":
                    type: "boolean"
                "tags":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WebLinkUpdateDto"}
                "readingDirection":
                    $ref: '#/components/schemas/ReadingDirectionEnum'
                "ageRating":
                    type: "integer"
                    format: "int32"
                "genres":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "totalBookCount":
                    type: "integer"
                    format: "int32"
                "sharingLabels":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "alternateTitles":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AlternateTitleUpdateDto"}
            description: "Metadata fields to update. Set a field to null to unset the metadata. You can omit fields you don't want to update."
            title: SeriesMetadataUpdateDto
        "WebLinkUpdateDto":
            required:
                - "label"
            type: "object"
            properties:
                "label":
                    type: "string"
                "url":
                    type: "string"
            title: WebLinkUpdateDto
        "ReadListUpdateDto":
            type: "object"
            properties:
                "name":
                    type: "string"
                "summary":
                    type: "string"
                "bookIds":
                    type: "array"
                    items:
                        type: "string"
                "ordered":
                    type: "boolean"
            title: ReadListUpdateDto
        "CollectionUpdateDto":
            type: "object"
            properties:
                "name":
                    type: "string"
                "ordered":
                    type: "boolean"
                "seriesIds":
                    type: "array"
                    items:
                        type: "string"
            title: CollectionUpdateDto
        "ReadProgressUpdateDto":
            type: "object"
            properties:
                "page":
                    type: "integer"
                    format: "int32"
                "completed":
                    type: "boolean"
            description: "page can be omitted if completed is set to true. completed can be omitted, and will be set accordingly depending on the page passed and the total number of pages in the book."
            title: ReadProgressUpdateDto
        "AuthorUpdateDto":
            required:
                - "name"
                - "role"
            type: "object"
            properties:
                "name":
                    type: "string"
                "role":
                    type: "string"
            title: AuthorUpdateDto
        "BookMetadataUpdateDto":
            type: "object"
            properties:
                "title":
                    type: "string"
                "titleLock":
                    type: "boolean"
                "summaryLock":
                    type: "boolean"
                "number":
                    type: "string"
                "numberLock":
                    type: "boolean"
                "numberSort":
                    type: "number"
                    format: "float"
                "numberSortLock":
                    type: "boolean"
                "releaseDateLock":
                    type: "boolean"
                "authorsLock":
                    type: "boolean"
                "tagsLock":
                    type: "boolean"
                "isbnLock":
                    type: "boolean"
                "linksLock":
                    type: "boolean"
                "tags":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "isbn":
                    type: "string"
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WebLinkUpdateDto"}
                "authors":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AuthorUpdateDto"}
                "summary":
                    type: "string"
                "releaseDate":
                    type: "string"
                    format: "date"
            description: "Metadata fields to update. Set a field to null to unset the metadata. You can omit fields you don't want to update."
            title: BookMetadataUpdateDto
        "FacetDto":
            required:
                - "links"
                - "metadata"
            type: "object"
            properties:
                "metadata": {"$ref": "#/components/schemas/FeedMetadataDto"}
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
            title: FacetDto
        "FeedDto":
            required:
                - "facets"
                - "groups"
                - "links"
                - "metadata"
                - "navigation"
                - "publications"
            type: "object"
            properties:
                "metadata": {"$ref": "#/components/schemas/FeedMetadataDto"}
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "navigation":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "facets":
                    type: "array"
                    items: {"$ref": "#/components/schemas/FacetDto"}
                "groups":
                    type: "array"
                    items: {"$ref": "#/components/schemas/FeedGroupDto"}
                "publications":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPPublicationDto"}
            title: FeedDto
        "FeedGroupDto":
            required:
                - "links"
                - "metadata"
                - "navigation"
                - "publications"
            type: "object"
            properties:
                "metadata": {"$ref": "#/components/schemas/FeedMetadataDto"}
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "navigation":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "publications":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPPublicationDto"}
            title: FeedGroupDto
        "FeedMetadataDto":
            required:
                - "title"
            type: "object"
            properties:
                "title":
                    type: "string"
                "subTitle":
                    type: "string"
                "type":
                    type: "string"
                "identifier":
                    type: "string"
                "modified":
                    type: "string"
                    format: "date-time"
                "description":
                    type: "string"
                "itemsPerPage":
                    type: "integer"
                    format: "int32"
                "currentPage":
                    type: "integer"
                    format: "int32"
                "numberOfItems":
                    type: "integer"
                    format: "int64"
            title: FeedMetadataDto
        "WPBelongsToDto":
            required:
                - "collection"
                - "series"
            type: "object"
            properties:
                "series":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPContributorDto"}
                "collection":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPContributorDto"}
            title: WPBelongsToDto
        "WPContributorDto":
            required:
                - "links"
                - "name"
            type: "object"
            properties:
                "name":
                    type: "string"
                "position":
                    type: "number"
                    format: "float"
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
            title: WPContributorDto
        "WPLinkDto":
            type: "object"
            properties:
                "title":
                    type: "string"
                "rel":
                    type: "string"
                "href":
                    type: "string"
                "type":
                    type: "string"
                "templated":
                    type: "boolean"
                "width":
                    type: "integer"
                    format: "int32"
                "height":
                    type: "integer"
                    format: "int32"
            title: WPLinkDto
        "WPMetadataDto":
            required:
                - "artist"
                - "author"
                - "colorist"
                - "contributor"
                - "editor"
                - "illustrator"
                - "inker"
                - "letterer"
                - "penciler"
                - "publisher"
                - "subject"
                - "title"
                - "translator"
            type: "object"
            properties:
                "title":
                    type: "string"
                "identifier":
                    type: "string"
                "type":
                    type: "string"
                "conformsTo":
                    type: "string"
                "sortAs":
                    type: "string"
                "subtitle":
                    type: "string"
                "modified":
                    type: "string"
                    format: "date-time"
                "published":
                    type: "string"
                    format: "date"
                "language":
                    type: "string"
                "author":
                    type: "array"
                    items:
                        type: "string"
                "translator":
                    type: "array"
                    items:
                        type: "string"
                "editor":
                    type: "array"
                    items:
                        type: "string"
                "artist":
                    type: "array"
                    items:
                        type: "string"
                "illustrator":
                    type: "array"
                    items:
                        type: "string"
                "letterer":
                    type: "array"
                    items:
                        type: "string"
                "penciler":
                    type: "array"
                    items:
                        type: "string"
                "colorist":
                    type: "array"
                    items:
                        type: "string"
                "inker":
                    type: "array"
                    items:
                        type: "string"
                "contributor":
                    type: "array"
                    items:
                        type: "string"
                "publisher":
                    type: "array"
                    items:
                        type: "string"
                "subject":
                    type: "array"
                    items:
                        type: "string"
                "readingProgression":
                    $ref: '#/components/schemas/ReadingProgressionEnum'
                "description":
                    type: "string"
                "numberOfPages":
                    type: "integer"
                    format: "int32"
                "belongsTo": {"$ref": "#/components/schemas/WPBelongsToDto"}
            title: WPMetadataDto
        "WPPublicationDto":
            required:
                - "images"
                - "links"
                - "metadata"
                - "readingOrder"
                - "resources"
                - "toc"
            type: "object"
            properties:
                "context":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/WPMetadataDto"}
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "images":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "readingOrder":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "resources":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
                "toc":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WPLinkDto"}
            title: WPPublicationDto
        "OpdsAuthor":
            required:
                - "name"
            type: "object"
            properties:
                "name":
                    type: "string"
                "uri":
                    type: "string"
                    format: "uri"
            title: OpdsAuthor
        "OpdsEntry":
            required:
                - "content"
                - "id"
                - "title"
                - "updated"
            type: "object"
            properties:
                "title":
                    type: "string"
                "updated":
                    type: "string"
                    format: "date-time"
                "id":
                    type: "string"
                "content":
                    type: "string"
            title: OpdsEntry
        "OpdsFeed":
            required:
                - "author"
                - "entries"
                - "id"
                - "links"
                - "title"
                - "updated"
            type: "object"
            properties:
                "id":
                    type: "string"
                "title":
                    type: "string"
                "updated":
                    type: "string"
                    format: "date-time"
                "author": {"$ref": "#/components/schemas/OpdsAuthor"}
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/OpdsLink"}
                "entries":
                    type: "array"
                    items: {"$ref": "#/components/schemas/OpdsEntry"}
            title: OpdsFeed
        "OpdsLink":
            required:
                - "href"
                - "rel"
                - "type"
            type: "object"
            properties:
                "type":
                    type: "string"
                "rel":
                    type: "string"
                "href":
                    type: "string"
            title: OpdsLink
        "OpenSearchDescription":
            required:
                - "description"
                - "inputEncoding"
                - "outputEncoding"
                - "shortName"
                - "url"
            type: "object"
            properties:
                "shortName":
                    maxLength: 16
                    minLength: 1
                    type: "string"
                "description":
                    maxLength: 1024
                    minLength: 1
                    type: "string"
                "inputEncoding":
                    type: "string"
                "outputEncoding":
                    type: "string"
                "url": {"$ref": "#/components/schemas/OpenSearchUrl"}
            title: OpenSearchDescription
        "OpenSearchUrl":
            required:
                - "template"
                - "type"
            type: "object"
            properties:
                "template":
                    type: "string"
                "type":
                    type: "string"
            title: OpenSearchUrl
        "AuthenticationActivityDto":
            required:
                - "dateTime"
                - "success"
            type: "object"
            properties:
                "userId":
                    type: "string"
                "email":
                    type: "string"
                "ip":
                    type: "string"
                "userAgent":
                    type: "string"
                "success":
                    type: "boolean"
                "error":
                    type: "string"
                "dateTime":
                    type: "string"
                    format: "date-time"
                "source":
                    type: "string"
            title: AuthenticationActivityDto
        "PageAuthenticationActivityDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AuthenticationActivityDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PageAuthenticationActivityDto
        "PageableObject":
            type: "object"
            properties:
                "pageNumber":
                    type: "integer"
                    format: "int32"
                "pageSize":
                    type: "integer"
                    format: "int32"
                "paged":
                    type: "boolean"
                "unpaged":
                    type: "boolean"
                "offset":
                    type: "integer"
                    format: "int64"
                "sort": {"$ref": "#/components/schemas/SortObject"}
            title: PageableObject
        "SortObject":
            type: "object"
            properties:
                "sorted":
                    type: "boolean"
                "unsorted":
                    type: "boolean"
                "empty":
                    type: "boolean"
            title: SortObject
        "TachiyomiReadProgressV2Dto":
            required:
                - "booksCount"
                - "booksInProgressCount"
                - "booksReadCount"
                - "booksUnreadCount"
                - "lastReadContinuousNumberSort"
                - "maxNumberSort"
            type: "object"
            properties:
                "booksCount":
                    type: "integer"
                    format: "int32"
                "booksReadCount":
                    type: "integer"
                    format: "int32"
                "booksUnreadCount":
                    type: "integer"
                    format: "int32"
                "booksInProgressCount":
                    type: "integer"
                    format: "int32"
                "lastReadContinuousNumberSort":
                    type: "number"
                    format: "float"
                "maxNumberSort":
                    type: "number"
                    format: "float"
            title: TachiyomiReadProgressV2Dto
        "AuthorDto":
            required:
                - "name"
                - "role"
            type: "object"
            properties:
                "name":
                    type: "string"
                "role":
                    type: "string"
            title: AuthorDto
        "PageAuthorDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AuthorDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PageAuthorDto
        "SettingsDto":
            required:
                - "deleteEmptyCollections"
                - "deleteEmptyReadLists"
                - "rememberMeDurationDays"
                - "taskPoolSize"
                - "thumbnailSize"
            type: "object"
            properties:
                "deleteEmptyCollections":
                    type: "boolean"
                "deleteEmptyReadLists":
                    type: "boolean"
                "rememberMeDurationDays":
                    type: "integer"
                    format: "int64"
                "thumbnailSize":
                    $ref: '#/components/schemas/ThumbnailSizeEnum'
                "taskPoolSize":
                    type: "integer"
                    format: "int32"
            title: SettingsDto
        "AlternateTitleDto":
            required:
                - "label"
                - "title"
            type: "object"
            properties:
                "label":
                    type: "string"
                "title":
                    type: "string"
            title: AlternateTitleDto
        "BookMetadataAggregationDto":
            required:
                - "authors"
                - "created"
                - "lastModified"
                - "summary"
                - "summaryNumber"
                - "tags"
            type: "object"
            properties:
                "authors":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AuthorDto"}
                "tags":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "releaseDate":
                    type: "string"
                    format: "date"
                "summary":
                    type: "string"
                "summaryNumber":
                    type: "string"
                "created":
                    type: "string"
                    format: "date-time"
                "lastModified":
                    type: "string"
                    format: "date-time"
            title: BookMetadataAggregationDto
        "PageSeriesDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/SeriesDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PageSeriesDto
        "SeriesDto":
            required:
                - "booksCount"
                - "booksInProgressCount"
                - "booksMetadata"
                - "booksReadCount"
                - "booksUnreadCount"
                - "created"
                - "deleted"
                - "fileLastModified"
                - "id"
                - "lastModified"
                - "libraryId"
                - "metadata"
                - "name"
                - "oneshot"
                - "url"
            type: "object"
            properties:
                "id":
                    type: "string"
                "libraryId":
                    type: "string"
                "name":
                    type: "string"
                "url":
                    type: "string"
                "created":
                    type: "string"
                    format: "date-time"
                "lastModified":
                    type: "string"
                    format: "date-time"
                "fileLastModified":
                    type: "string"
                    format: "date-time"
                "booksCount":
                    type: "integer"
                    format: "int32"
                "booksReadCount":
                    type: "integer"
                    format: "int32"
                "booksUnreadCount":
                    type: "integer"
                    format: "int32"
                "booksInProgressCount":
                    type: "integer"
                    format: "int32"
                "metadata": {"$ref": "#/components/schemas/SeriesMetadataDto"}
                "booksMetadata": {"$ref": "#/components/schemas/BookMetadataAggregationDto"}
                "deleted":
                    type: "boolean"
                "oneshot":
                    type: "boolean"
            title: SeriesDto
        "SeriesMetadataDto":
            required:
                - "ageRatingLock"
                - "alternateTitles"
                - "alternateTitlesLock"
                - "created"
                - "genres"
                - "genresLock"
                - "language"
                - "languageLock"
                - "lastModified"
                - "links"
                - "linksLock"
                - "publisher"
                - "publisherLock"
                - "readingDirection"
                - "readingDirectionLock"
                - "sharingLabels"
                - "sharingLabelsLock"
                - "status"
                - "statusLock"
                - "summary"
                - "summaryLock"
                - "tags"
                - "tagsLock"
                - "title"
                - "titleLock"
                - "titleSort"
                - "titleSortLock"
                - "totalBookCountLock"
            type: "object"
            properties:
                "status":
                    type: "string"
                "statusLock":
                    type: "boolean"
                "title":
                    type: "string"
                "titleLock":
                    type: "boolean"
                "titleSort":
                    type: "string"
                "titleSortLock":
                    type: "boolean"
                "summary":
                    type: "string"
                "summaryLock":
                    type: "boolean"
                "readingDirection":
                    type: "string"
                "readingDirectionLock":
                    type: "boolean"
                "publisher":
                    type: "string"
                "publisherLock":
                    type: "boolean"
                "ageRating":
                    type: "integer"
                    format: "int32"
                "ageRatingLock":
                    type: "boolean"
                "language":
                    type: "string"
                "languageLock":
                    type: "boolean"
                "genres":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "genresLock":
                    type: "boolean"
                "tags":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "tagsLock":
                    type: "boolean"
                "totalBookCount":
                    type: "integer"
                    format: "int32"
                "totalBookCountLock":
                    type: "boolean"
                "sharingLabels":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "sharingLabelsLock":
                    type: "boolean"
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WebLinkDto"}
                "linksLock":
                    type: "boolean"
                "alternateTitles":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AlternateTitleDto"}
                "alternateTitlesLock":
                    type: "boolean"
                "created":
                    type: "string"
                    format: "date-time"
                "lastModified":
                    type: "string"
                    format: "date-time"
            title: SeriesMetadataDto
        "WebLinkDto":
            required:
                - "label"
                - "url"
            type: "object"
            properties:
                "label":
                    type: "string"
                "url":
                    type: "string"
            title: WebLinkDto
        "StreamingResponseBody":
            type: "object"
            title: StreamingResponseBody
        "BookDto":
            required:
                - "created"
                - "deleted"
                - "fileHash"
                - "fileLastModified"
                - "id"
                - "lastModified"
                - "libraryId"
                - "media"
                - "metadata"
                - "name"
                - "number"
                - "oneshot"
                - "seriesId"
                - "seriesTitle"
                - "size"
                - "sizeBytes"
                - "url"
            type: "object"
            properties:
                "id":
                    type: "string"
                "seriesId":
                    type: "string"
                "seriesTitle":
                    type: "string"
                "libraryId":
                    type: "string"
                "name":
                    type: "string"
                "url":
                    type: "string"
                "number":
                    type: "integer"
                    format: "int32"
                "created":
                    type: "string"
                    format: "date-time"
                "lastModified":
                    type: "string"
                    format: "date-time"
                "fileLastModified":
                    type: "string"
                    format: "date-time"
                "sizeBytes":
                    type: "integer"
                    format: "int64"
                "size":
                    type: "string"
                "media": {"$ref": "#/components/schemas/MediaDto"}
                "metadata": {"$ref": "#/components/schemas/BookMetadataDto"}
                "readProgress": {"$ref": "#/components/schemas/ReadProgressDto"}
                "deleted":
                    type: "boolean"
                "fileHash":
                    type: "string"
                "oneshot":
                    type: "boolean"
            title: BookDto
        "BookMetadataDto":
            required:
                - "authors"
                - "authorsLock"
                - "created"
                - "isbn"
                - "isbnLock"
                - "lastModified"
                - "links"
                - "linksLock"
                - "number"
                - "numberLock"
                - "numberSort"
                - "numberSortLock"
                - "releaseDateLock"
                - "summary"
                - "summaryLock"
                - "tags"
                - "tagsLock"
                - "title"
                - "titleLock"
            type: "object"
            properties:
                "title":
                    type: "string"
                "titleLock":
                    type: "boolean"
                "summary":
                    type: "string"
                "summaryLock":
                    type: "boolean"
                "number":
                    type: "string"
                "numberLock":
                    type: "boolean"
                "numberSort":
                    type: "number"
                    format: "float"
                "numberSortLock":
                    type: "boolean"
                "releaseDate":
                    type: "string"
                    format: "date"
                "releaseDateLock":
                    type: "boolean"
                "authors":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AuthorDto"}
                "authorsLock":
                    type: "boolean"
                "tags":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "tagsLock":
                    type: "boolean"
                "isbn":
                    type: "string"
                "isbnLock":
                    type: "boolean"
                "links":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WebLinkDto"}
                "linksLock":
                    type: "boolean"
                "created":
                    type: "string"
                    format: "date-time"
                "lastModified":
                    type: "string"
                    format: "date-time"
            title: BookMetadataDto
        "MediaDto":
            required:
                - "comment"
                - "mediaType"
                - "pagesCount"
                - "status"
            type: "object"
            properties:
                "status":
                    type: "string"
                "mediaType":
                    type: "string"
                "pagesCount":
                    type: "integer"
                    format: "int32"
                "comment":
                    type: "string"
            title: MediaDto
        "PageBookDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/BookDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PageBookDto
        "ReadProgressDto":
            required:
                - "completed"
                - "created"
                - "lastModified"
                - "page"
                - "readDate"
            type: "object"
            properties:
                "page":
                    type: "integer"
                    format: "int32"
                "completed":
                    type: "boolean"
                "readDate":
                    type: "string"
                    format: "date-time"
                "created":
                    type: "string"
                    format: "date-time"
                "lastModified":
                    type: "string"
                    format: "date-time"
            title: ReadProgressDto
        "GroupCountDto":
            required:
                - "count"
                - "group"
            type: "object"
            properties:
                "group":
                    type: "string"
                "count":
                    type: "integer"
                    format: "int32"
            title: GroupCountDto
        "PageReadListDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ReadListDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PageReadListDto
        "TachiyomiReadProgressDto":
            required:
                - "booksCount"
                - "booksInProgressCount"
                - "booksReadCount"
                - "booksUnreadCount"
                - "lastReadContinuousIndex"
            type: "object"
            properties:
                "booksCount":
                    type: "integer"
                    format: "int32"
                "booksReadCount":
                    type: "integer"
                    format: "int32"
                "booksUnreadCount":
                    type: "integer"
                    format: "int32"
                "booksInProgressCount":
                    type: "integer"
                    format: "int32"
                "lastReadContinuousIndex":
                    type: "integer"
                    format: "int32"
            title: TachiyomiReadProgressDto
        "PageHashKnownDto":
            required:
                - "action"
                - "created"
                - "deleteCount"
                - "hash"
                - "lastModified"
                - "matchCount"
            type: "object"
            properties:
                "hash":
                    type: "string"
                "size":
                    type: "integer"
                    format: "int64"
                "action":
                    $ref: '#/components/schemas/ActionEnum'
                "deleteCount":
                    type: "integer"
                    format: "int32"
                "matchCount":
                    type: "integer"
                    format: "int32"
                "created":
                    type: "string"
                    format: "date-time"
                "lastModified":
                    type: "string"
                    format: "date-time"
            title: PageHashKnownDto
        "PagePageHashKnownDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PageHashKnownDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PagePageHashKnownDto
        "PagePageHashMatchDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PageHashMatchDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PagePageHashMatchDto
        "PageHashUnknownDto":
            required:
                - "hash"
                - "matchCount"
            type: "object"
            properties:
                "hash":
                    type: "string"
                "size":
                    type: "integer"
                    format: "int64"
                "matchCount":
                    type: "integer"
                    format: "int32"
            title: PageHashUnknownDto
        "PagePageHashUnknownDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PageHashUnknownDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PagePageHashUnknownDto
        "HistoricalEventDto":
            required:
                - "properties"
                - "timestamp"
                - "type"
            type: "object"
            properties:
                "type":
                    type: "string"
                "timestamp":
                    type: "string"
                    format: "date-time"
                "bookId":
                    type: "string"
                "seriesId":
                    type: "string"
                "properties":
                    $ref: '#/components/schemas/Properties'
            title: HistoricalEventDto
        "PageHistoricalEventDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/HistoricalEventDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PageHistoricalEventDto
        "PageCollectionDto":
            type: "object"
            properties:
                "totalElements":
                    type: "integer"
                    format: "int64"
                "totalPages":
                    type: "integer"
                    format: "int32"
                "pageable": {"$ref": "#/components/schemas/PageableObject"}
                "size":
                    type: "integer"
                    format: "int32"
                "content":
                    type: "array"
                    items: {"$ref": "#/components/schemas/CollectionDto"}
                "number":
                    type: "integer"
                    format: "int32"
                "sort": {"$ref": "#/components/schemas/SortObject"}
                "first":
                    type: "boolean"
                "last":
                    type: "boolean"
                "numberOfElements":
                    type: "integer"
                    format: "int32"
                "empty":
                    type: "boolean"
            title: PageCollectionDto
        "ClaimStatus":
            required:
                - "isClaimed"
            type: "object"
            properties:
                "isClaimed":
                    type: "boolean"
            title: ClaimStatus
        "MediaType":
            type: "object"
            properties:
                "type":
                    type: "string"
                "subtype":
                    type: "string"
                "parameters":
                    $ref: '#/components/schemas/Parameters'
                "qualityValue":
                    type: "number"
                    format: "double"
                "concrete":
                    type: "boolean"
                "wildcardType":
                    type: "boolean"
                "wildcardSubtype":
                    type: "boolean"
                "subtypeSuffix":
                    type: "string"
                "charset":
                    type: "string"
            title: MediaType
        "ItemDto":
            required:
                - "id"
                - "tags"
            type: "object"
            properties:
                "id":
                    type: "string"
                "url":
                    type: "string"
                "title":
                    type: "string"
                "summary":
                    type: "string"
                "content_html":
                    type: "string"
                "date_modified":
                    type: "string"
                    format: "date-time"
                "author": {"$ref": "#/components/schemas/AuthorDto"}
                "tags":
                    uniqueItems: true
                    type: "array"
                    items:
                        type: "string"
                "_komga": {"$ref": "#/components/schemas/KomgaExtensionDto"}
            title: ItemDto
        "JsonFeedDto":
            required:
                - "items"
                - "title"
                - "version"
            type: "object"
            properties:
                "version":
                    type: "string"
                "title":
                    type: "string"
                "home_page_url":
                    type: "string"
                "description":
                    type: "string"
                "items":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ItemDto"}
            title: JsonFeedDto
        "KomgaExtensionDto":
            required:
                - "read"
            type: "object"
            properties:
                "read":
                    type: "boolean"
            title: KomgaExtensionDto
        "OAuth2ClientDto":
            required:
                - "name"
                - "registrationId"
            type: "object"
            properties:
                "name":
                    type: "string"
                "registrationId":
                    type: "string"
            title: OAuth2ClientDto
        PutAnnouncementsV1B:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: PutAnnouncementsV1B
        PostSeriesBySeriesIDThumbnailsV1B:
            required:
                - "file"
            type: "object"
            properties:
                "file":
                    type: "string"
                    format: "binary"
            title: PostSeriesBySeriesIDThumbnailsV1B
        PostReadlistByIDThumbnailsV1B:
            required:
                - "file"
            type: "object"
            properties:
                "file":
                    type: "string"
                    format: "binary"
            title: PostReadlistByIDThumbnailsV1B
        PostReadlistsMatchComicrackV1B:
            required:
                - "file"
            type: "object"
            properties:
                "file":
                    type: "string"
                    format: "binary"
            title: PostReadlistsMatchComicrackV1B
        PostCollectionByIDThumbnailsV1B:
            required:
                - "file"
            type: "object"
            properties:
                "file":
                    type: "string"
                    format: "binary"
            title: PostCollectionByIDThumbnailsV1B
        PostBookByBookIDThumbnailsV1B:
            required:
                - "file"
            type: "object"
            properties:
                "file":
                    type: "string"
                    format: "binary"
            title: PostBookByBookIDThumbnailsV1B
        PatchBooksMetadataV1B:
            type: "object"
            additionalProperties: {"$ref": "#/components/schemas/BookMetadataUpdateDto"}
            description: "A map of book IDs which values are the metadata fields to update. Set a field to null to unset the metadata. You can omit fields you don't want to update."
            title: PatchBooksMetadataV1B
        GetUsersV2R200:
            type: "array"
            items: {"$ref": "#/components/schemas/UserDto"}
            title: GetUsersV2R200
        PostTransientBooksV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/TransientBookDto"}
            title: PostTransientBooksV1R200
        GetSeriesBySeriesIDThumbnailsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/ThumbnailSeriesDto"}
            title: GetSeriesBySeriesIDThumbnailsV1R200
        GetReadlistByIDThumbnailsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/ThumbnailReadListDto"}
            title: GetReadlistByIDThumbnailsV1R200
        GetLibrariesV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/LibraryDto"}
            title: GetLibrariesV1R200
        GetCollectionByIDThumbnailsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/ThumbnailSeriesCollectionDto"}
            title: GetCollectionByIDThumbnailsV1R200
        GetBookByBookIDThumbnailsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/ThumbnailBookDto"}
            title: GetBookByBookIDThumbnailsV1R200
        GetTransientBookByIDPageByPageNumberV1R200:
            type: "string"
            format: "byte"
            title: GetTransientBookByIDPageByPageNumberV1R200
        GetTagsV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetTagsV1R200
        GetTagsSeriesV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetTagsSeriesV1R200
        GetTagsBookV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetTagsBookV1R200
        GetSharingLabelsV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetSharingLabelsV1R200
        GetSeriesBySeriesIDCollectionsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/CollectionDto"}
            title: GetSeriesBySeriesIDCollectionsV1R200
        GetSeriesReleaseDatesV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetSeriesReleaseDatesV1R200
        GetSeriesAlphabeticalGroupsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/GroupCountDto"}
            title: GetSeriesAlphabeticalGroupsV1R200
        GetPublishersV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetPublishersV1R200
        GetLanguagesV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetLanguagesV1R200
        GetGenresV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetGenresV1R200
        GetBookByBookIDReadlistsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/ReadListDto"}
            title: GetBookByBookIDReadlistsV1R200
        GetBookByBookIDPagesV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/PageDto"}
            title: GetBookByBookIDPagesV1R200
        GetBookByBookIDPageByPageNumberRawV1R200:
            type: "string"
            format: "byte"
            title: GetBookByBookIDPageByPageNumberRawV1R200
        GetAuthorsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/AuthorDto"}
            title: GetAuthorsV1R200
        GetAuthorsRolesV1R200:
            type: "array"
            items:
                type: "string"
            title: GetAuthorsRolesV1R200
        GetAuthorsNamesV1R200:
            type: "array"
            items:
                type: "string"
            title: GetAuthorsNamesV1R200
        GetAgeRatingsV1R200:
            uniqueItems: true
            type: "array"
            items:
                type: "string"
            title: GetAgeRatingsV1R200
        DeleteTasksV1R200:
            type: "integer"
            format: "int32"
            title: DeleteTasksV1R200
        GetOauth2ProvIDErsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/OAuth2ClientDto"}
            title: GetOauth2ProvIDErsV1R200
        PutOauth2ProvIDErsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/OAuth2ClientDto"}
            title: PutOauth2ProvIDErsV1R200
        PostOauth2ProvIDErsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/OAuth2ClientDto"}
            title: PostOauth2ProvIDErsV1R200
        DeleteOauth2ProvIDErsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/OAuth2ClientDto"}
            title: DeleteOauth2ProvIDErsV1R200
        OptionsOauth2ProvIDErsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/OAuth2ClientDto"}
            title: OptionsOauth2ProvIDErsV1R200
        HeadOauth2ProvIDErsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/OAuth2ClientDto"}
            title: HeadOauth2ProvIDErsV1R200
        PatchOauth2ProvIDErsV1R200:
            type: "array"
            items: {"$ref": "#/components/schemas/OAuth2ClientDto"}
            title: PatchOauth2ProvIDErsV1R200
        ActionEnum:
            type: "string"
            enum:
                - "DELETE_AUTO"
                - "DELETE_MANUAL"
                - "IGNORE"
            title: ActionEnum
        ScanIntervalEnum:
            type: "string"
            enum:
                - "DISABLED"
                - "HOURLY"
                - "EVERY_6H"
                - "EVERY_12H"
                - "DAILY"
                - "WEEKLY"
            title: ScanIntervalEnum
        SeriesCoverEnum:
            type: "string"
            enum:
                - "FIRST"
                - "FIRST_UNREAD_OR_FIRST"
                - "FIRST_UNREAD_OR_LAST"
                - "LAST"
            title: SeriesCoverEnum
        RestrictionEnum:
            type: "string"
            enum:
                - "ALLOW_ONLY"
                - "EXCLUDE"
            title: RestrictionEnum
        CopyModeEnum:
            type: "string"
            enum:
                - "MOVE"
                - "COPY"
                - "HARDLINK"
            title: CopyModeEnum
        ThumbnailSizeEnum:
            type: "string"
            enum:
                - "DEFAULT"
                - "MEDIUM"
                - "LARGE"
                - "XLARGE"
            title: ThumbnailSizeEnum
        StatusEnum:
            type: "string"
            enum:
                - "ENDED"
                - "ONGOING"
                - "ABANDONED"
                - "HIATUS"
            title: StatusEnum
        ReadingDirectionEnum:
            type: "string"
            enum:
                - "LEFT_TO_RIGHT"
                - "RIGHT_TO_LEFT"
                - "VERTICAL"
                - "WEBTOON"
            title: ReadingDirectionEnum
        ReadingProgressionEnum:
            type: "string"
            enum:
                - "rtl"
                - "ltr"
                - "ttb"
                - "btt"
                - "auto"
            title: ReadingProgressionEnum
        Properties:
            type: "object"
            additionalProperties:
                type: "string"
            title: Properties
        Parameters:
            type: "object"
            additionalProperties:
                type: "string"
            title: Parameters
    securitySchemes:
        "basicAuth":
            type: "http"
            scheme: "basic"
