// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.komga.client.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.komga.client.models.AuthenticationActivityDto;
import io.github.primelib.komga.client.models.AuthorDto;
import io.github.primelib.komga.client.models.BookDto;
import io.github.primelib.komga.client.models.BookImportBatchDto;
import io.github.primelib.komga.client.models.BookMetadataUpdateDto;
import io.github.primelib.komga.client.models.ClaimStatus;
import io.github.primelib.komga.client.models.CollectionCreationDto;
import io.github.primelib.komga.client.models.CollectionDto;
import io.github.primelib.komga.client.models.CollectionUpdateDto;
import io.github.primelib.komga.client.models.DirectoryListingDto;
import io.github.primelib.komga.client.models.DirectoryRequestDto;
import io.github.primelib.komga.client.models.FeedDto;
import io.github.primelib.komga.client.models.GroupCountDto;
import io.github.primelib.komga.client.models.JsonFeedDto;
import io.github.primelib.komga.client.models.LibraryCreationDto;
import io.github.primelib.komga.client.models.LibraryDto;
import io.github.primelib.komga.client.models.LibraryUpdateDto;
import io.github.primelib.komga.client.models.MediaType;
import io.github.primelib.komga.client.models.Oauth2ClientDto;
import io.github.primelib.komga.client.models.OpdsFeed;
import io.github.primelib.komga.client.models.OpenSearchDescription;
import io.github.primelib.komga.client.models.PageAuthenticationActivityDto;
import io.github.primelib.komga.client.models.PageAuthorDto;
import io.github.primelib.komga.client.models.PageBookDto;
import io.github.primelib.komga.client.models.PageCollectionDto;
import io.github.primelib.komga.client.models.PageDto;
import io.github.primelib.komga.client.models.PageHashCreationDto;
import io.github.primelib.komga.client.models.PageHashMatchDto;
import io.github.primelib.komga.client.models.PageHistoricalEventDto;
import io.github.primelib.komga.client.models.PagePageHashKnownDto;
import io.github.primelib.komga.client.models.PagePageHashMatchDto;
import io.github.primelib.komga.client.models.PagePageHashUnknownDto;
import io.github.primelib.komga.client.models.PageReadListDto;
import io.github.primelib.komga.client.models.PageSeriesDto;
import io.github.primelib.komga.client.models.PasswordUpdateDto;
import io.github.primelib.komga.client.models.PostBookByBookIDThumbnailsV1B;
import io.github.primelib.komga.client.models.PostCollectionByIDThumbnailsV1B;
import io.github.primelib.komga.client.models.PostReadlistByIDThumbnailsV1B;
import io.github.primelib.komga.client.models.PostReadlistsMatchComicrackV1B;
import io.github.primelib.komga.client.models.PostSeriesBySeriesIDThumbnailsV1B;
import io.github.primelib.komga.client.models.ReadListCreationDto;
import io.github.primelib.komga.client.models.ReadListDto;
import io.github.primelib.komga.client.models.ReadListRequestMatchDto;
import io.github.primelib.komga.client.models.ReadListUpdateDto;
import io.github.primelib.komga.client.models.ReadProgressUpdateDto;
import io.github.primelib.komga.client.models.ScanRequestDto;
import io.github.primelib.komga.client.models.SeriesDto;
import io.github.primelib.komga.client.models.SeriesMetadataUpdateDto;
import io.github.primelib.komga.client.models.SettingsDto;
import io.github.primelib.komga.client.models.SettingsUpdateDto;
import io.github.primelib.komga.client.models.TachiyomiReadProgressDto;
import io.github.primelib.komga.client.models.TachiyomiReadProgressUpdateDto;
import io.github.primelib.komga.client.models.TachiyomiReadProgressUpdateV2Dto;
import io.github.primelib.komga.client.models.TachiyomiReadProgressV2Dto;
import io.github.primelib.komga.client.models.ThumbnailBookDto;
import io.github.primelib.komga.client.models.ThumbnailReadListDto;
import io.github.primelib.komga.client.models.ThumbnailSeriesCollectionDto;
import io.github.primelib.komga.client.models.ThumbnailSeriesDto;
import io.github.primelib.komga.client.models.TransientBookDto;
import io.github.primelib.komga.client.models.UserCreationDto;
import io.github.primelib.komga.client.models.UserDto;
import io.github.primelib.komga.client.models.UserUpdateDto;
import io.github.primelib.komga.client.models.WppublicationDto;
import java.util.Map;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Generated(value = "io.github.primelib.primecodegen")
public interface KomgaClientApi {

    /**
    * GetSeriesBySeriesIDReadProgressTachiyomiV2
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v2/series/{seriesId}/read-progress/tachiyomi")
    TachiyomiReadProgressV2Dto GetSeriesBySeriesIDReadProgressTachiyomiV2(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PutSeriesBySeriesIDReadProgressTachiyomiV2
    * 
    *
    * @param seriesId 
    * @param payload 
    */
    @RequestLine("PUT /api/v2/series/{seriesId}/read-progress/tachiyomi")
    @Headers({
        "Content-Type: application/json"
    })
    void PutSeriesBySeriesIDReadProgressTachiyomiV2(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull TachiyomiReadProgressUpdateV2Dto payload
    );

    /**
    * PutSeriesBySeriesIDThumbnailByThumbnailIDSelectedV1
    * 
    *
    * @param seriesId 
    * @param thumbnailId 
    */
    @RequestLine("PUT /api/v1/series/{seriesId}/thumbnails/{thumbnailId}/selected")
    void PutSeriesBySeriesIDThumbnailByThumbnailIDSelectedV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * PutReadlistByIDThumbnailByThumbnailIDSelectedV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("PUT /api/v1/readlists/{id}/thumbnails/{thumbnailId}/selected")
    void PutReadlistByIDThumbnailByThumbnailIDSelectedV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetReadlistByIDReadProgressTachiyomiV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/readlists/{id}/read-progress/tachiyomi")
    TachiyomiReadProgressDto GetReadlistByIDReadProgressTachiyomiV1(
            @NotNull @Param("id") String id
    );

    /**
    * PutReadlistByIDReadProgressTachiyomiV1
    * 
    *
    * @param id 
    * @param payload 
    */
    @RequestLine("PUT /api/v1/readlists/{id}/read-progress/tachiyomi")
    @Headers({
        "Content-Type: application/json"
    })
    void PutReadlistByIDReadProgressTachiyomiV1(
            @NotNull @Param("id") String id,
            @NotNull TachiyomiReadProgressUpdateDto payload
    );

    /**
    * GetPageHashesV1
    * 
    *
    * @param action 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/page-hashes?action={action}&page={page}&size={size}&sort={sort}")
    PagePageHashKnownDto GetPageHashesV1(
            @Nullable @Param("action") String[] action,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * PutPageHashesV1
    * 
    *
    * @param payload 
    */
    @RequestLine("PUT /api/v1/page-hashes")
    @Headers({
        "Content-Type: application/json"
    })
    void PutPageHashesV1(
            @NotNull PageHashCreationDto payload
    );

    /**
    * GetLibraryByLibraryIDV1
    * 
    *
    * @param libraryId 
    */
    @RequestLine("GET /api/v1/libraries/{libraryId}")
    LibraryDto GetLibraryByLibraryIDV1(
            @NotNull @Param("libraryId") String libraryId
    );

    /**
    * PutLibraryByLibraryIDV1
    * 
    *
    * @param libraryId 
    * @param payload 
    * @deprecated
    */
    @RequestLine("PUT /api/v1/libraries/{libraryId}")
    @Headers({
        "Content-Type: application/json"
    })
    @Deprecated
    void PutLibraryByLibraryIDV1(
            @NotNull @Param("libraryId") String libraryId,
            @NotNull LibraryUpdateDto payload
    );

    /**
    * DeleteLibraryByLibraryIDV1
    * 
    *
    * @param libraryId 
    */
    @RequestLine("DELETE /api/v1/libraries/{libraryId}")
    void DeleteLibraryByLibraryIDV1(
            @NotNull @Param("libraryId") String libraryId
    );

    /**
    * PatchLibraryByLibraryIDV1
    * 
    *
    * @param libraryId 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/libraries/{libraryId}")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchLibraryByLibraryIDV1(
            @NotNull @Param("libraryId") String libraryId,
            @NotNull LibraryUpdateDto payload
    );

    /**
    * PutCollectionByIDThumbnailByThumbnailIDSelectedV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("PUT /api/v1/collections/{id}/thumbnails/{thumbnailId}/selected")
    void PutCollectionByIDThumbnailByThumbnailIDSelectedV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * PutBookByBookIDThumbnailByThumbnailIDSelectedV1
    * 
    *
    * @param bookId 
    * @param thumbnailId 
    */
    @RequestLine("PUT /api/v1/books/{bookId}/thumbnails/{thumbnailId}/selected")
    void PutBookByBookIDThumbnailByThumbnailIDSelectedV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * PutBooksThumbnailsV1
    * 
    *
    * @param forBiggerResultOnly 
    */
    @RequestLine("PUT /api/v1/books/thumbnails?forBiggerResultOnly={forBiggerResultOnly}")
    void PutBooksThumbnailsV1(
            @Nullable @Param("forBiggerResultOnly") Boolean forBiggerResultOnly
    );

    /**
    * GetAnnouncementsV1
    * 
    *
    */
    @RequestLine("GET /api/v1/announcements")
    JsonFeedDto GetAnnouncementsV1();

    /**
    * PutAnnouncementsV1
    * 
    *
    * @param payload 
    */
    @RequestLine("PUT /api/v1/announcements")
    @Headers({
        "Content-Type: application/json"
    })
    void PutAnnouncementsV1(
            @NotNull String[] payload
    );

    /**
    * GetUsersV2
    * 
    *
    */
    @RequestLine("GET /api/v2/users")
    UserDto[] GetUsersV2();

    /**
    * PostUsersV2
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v2/users")
    @Headers({
        "Content-Type: application/json"
    })
    UserDto PostUsersV2(
            @NotNull UserCreationDto payload
    );

    /**
    * PostTransientBooksV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/transient-books")
    @Headers({
        "Content-Type: application/json"
    })
    TransientBookDto[] PostTransientBooksV1(
            @NotNull ScanRequestDto payload
    );

    /**
    * PostTransientBookByIDAnalyzeV1
    * 
    *
    * @param id 
    */
    @RequestLine("POST /api/v1/transient-books/{id}/analyze")
    TransientBookDto PostTransientBookByIDAnalyzeV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetSeriesBySeriesIDThumbnailsV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/thumbnails")
    ThumbnailSeriesDto[] GetSeriesBySeriesIDThumbnailsV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PostSeriesBySeriesIDThumbnailsV1
    * 
    *
    * @param seriesId 
    * @param selected 
    * @param payload 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/thumbnails?selected={selected}")
    @Headers({
        "Content-Type: multipart/form-data"
    })
    ThumbnailSeriesDto PostSeriesBySeriesIDThumbnailsV1(
            @NotNull @Param("seriesId") String seriesId,
            @Nullable @Param("selected") Boolean selected,
            @NotNull PostSeriesBySeriesIDThumbnailsV1B payload
    );

    /**
    * PostSeriesBySeriesIDReadProgressV1
    * 
    * Mark all book for series as read
    *
    * @param seriesId 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/read-progress")
    void PostSeriesBySeriesIDReadProgressV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * DeleteSeriesBySeriesIDReadProgressV1
    * 
    * Mark all book for series as unread
    *
    * @param seriesId 
    */
    @RequestLine("DELETE /api/v1/series/{seriesId}/read-progress")
    void DeleteSeriesBySeriesIDReadProgressV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PostSeriesBySeriesIDMetadataRefreshV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/metadata/refresh")
    void PostSeriesBySeriesIDMetadataRefreshV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PostSeriesBySeriesIDAnalyzeV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/analyze")
    void PostSeriesBySeriesIDAnalyzeV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetReadlistsV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/readlists?search={search}&libraryId={libraryId}&unpaged={unpaged}&page={page}&size={size}")
    PageReadListDto GetReadlistsV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * PostReadlistsV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/readlists")
    @Headers({
        "Content-Type: application/json"
    })
    ReadListDto PostReadlistsV1(
            @NotNull ReadListCreationDto payload
    );

    /**
    * GetReadlistByIDThumbnailsV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/readlists/{id}/thumbnails")
    ThumbnailReadListDto[] GetReadlistByIDThumbnailsV1(
            @NotNull @Param("id") String id
    );

    /**
    * PostReadlistByIDThumbnailsV1
    * 
    *
    * @param id 
    * @param selected 
    * @param payload 
    */
    @RequestLine("POST /api/v1/readlists/{id}/thumbnails?selected={selected}")
    @Headers({
        "Content-Type: multipart/form-data"
    })
    ThumbnailReadListDto PostReadlistByIDThumbnailsV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("selected") Boolean selected,
            @NotNull PostReadlistByIDThumbnailsV1B payload
    );

    /**
    * PostReadlistsMatchComicrackV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/readlists/match/comicrack")
    @Headers({
        "Content-Type: application/json"
    })
    ReadListRequestMatchDto PostReadlistsMatchComicrackV1(
            @NotNull PostReadlistsMatchComicrackV1B payload
    );

    /**
    * PostPageHashByPageHashDeleteMatchV1
    * 
    *
    * @param pageHash 
    * @param payload 
    */
    @RequestLine("POST /api/v1/page-hashes/{pageHash}/delete-match")
    @Headers({
        "Content-Type: application/json"
    })
    void PostPageHashByPageHashDeleteMatchV1(
            @NotNull @Param("pageHash") String pageHash,
            @NotNull PageHashMatchDto payload
    );

    /**
    * PostPageHashByPageHashDeleteAllV1
    * 
    *
    * @param pageHash 
    */
    @RequestLine("POST /api/v1/page-hashes/{pageHash}/delete-all")
    void PostPageHashByPageHashDeleteAllV1(
            @NotNull @Param("pageHash") String pageHash
    );

    /**
    * GetLibrariesV1
    * 
    *
    */
    @RequestLine("GET /api/v1/libraries")
    LibraryDto[] GetLibrariesV1();

    /**
    * PostLibrariesV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/libraries")
    @Headers({
        "Content-Type: application/json"
    })
    LibraryDto PostLibrariesV1(
            @NotNull LibraryCreationDto payload
    );

    /**
    * PostLibraryByLibraryIDScanV1
    * 
    *
    * @param libraryId 
    * @param deep 
    */
    @RequestLine("POST /api/v1/libraries/{libraryId}/scan?deep={deep}")
    void PostLibraryByLibraryIDScanV1(
            @NotNull @Param("libraryId") String libraryId,
            @Nullable @Param("deep") Boolean deep
    );

    /**
    * PostLibraryByLibraryIDMetadataRefreshV1
    * 
    *
    * @param libraryId 
    */
    @RequestLine("POST /api/v1/libraries/{libraryId}/metadata/refresh")
    void PostLibraryByLibraryIDMetadataRefreshV1(
            @NotNull @Param("libraryId") String libraryId
    );

    /**
    * PostLibraryByLibraryIDEmptyTrashV1
    * 
    *
    * @param libraryId 
    */
    @RequestLine("POST /api/v1/libraries/{libraryId}/empty-trash")
    void PostLibraryByLibraryIDEmptyTrashV1(
            @NotNull @Param("libraryId") String libraryId
    );

    /**
    * PostLibraryByLibraryIDAnalyzeV1
    * 
    *
    * @param libraryId 
    */
    @RequestLine("POST /api/v1/libraries/{libraryId}/analyze")
    void PostLibraryByLibraryIDAnalyzeV1(
            @NotNull @Param("libraryId") String libraryId
    );

    /**
    * PostFilesystemV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/filesystem")
    @Headers({
        "Content-Type: application/json"
    })
    DirectoryListingDto PostFilesystemV1(
            @NotNull DirectoryRequestDto payload
    );

    /**
    * GetCollectionsV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/collections?search={search}&libraryId={libraryId}&unpaged={unpaged}&page={page}&size={size}")
    PageCollectionDto GetCollectionsV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * PostCollectionsV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/collections")
    @Headers({
        "Content-Type: application/json"
    })
    CollectionDto PostCollectionsV1(
            @NotNull CollectionCreationDto payload
    );

    /**
    * GetCollectionByIDThumbnailsV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/collections/{id}/thumbnails")
    ThumbnailSeriesCollectionDto[] GetCollectionByIDThumbnailsV1(
            @NotNull @Param("id") String id
    );

    /**
    * PostCollectionByIDThumbnailsV1
    * 
    *
    * @param id 
    * @param selected 
    * @param payload 
    */
    @RequestLine("POST /api/v1/collections/{id}/thumbnails?selected={selected}")
    @Headers({
        "Content-Type: multipart/form-data"
    })
    ThumbnailSeriesCollectionDto PostCollectionByIDThumbnailsV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("selected") Boolean selected,
            @NotNull PostCollectionByIDThumbnailsV1B payload
    );

    /**
    * GetClaimV1
    * 
    *
    */
    @RequestLine("GET /api/v1/claim")
    ClaimStatus GetClaimV1();

    /**
    * PostClaimV1
    * 
    *
    * @param xKomgaEmail 
    * @param xKomgaPassword 
    */
    @RequestLine("POST /api/v1/claim")
    @Headers({
        "X-Komga-Email: {xKomgaEmail}",
        "X-Komga-Password: {xKomgaPassword}"
    })
    UserDto PostClaimV1(
            @NotNull @Param("xKomgaEmail") String xKomgaEmail,
            @NotNull @Param("xKomgaPassword") String xKomgaPassword
    );

    /**
    * GetBookByBookIDThumbnailsV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/thumbnails")
    ThumbnailBookDto[] GetBookByBookIDThumbnailsV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PostBookByBookIDThumbnailsV1
    * 
    *
    * @param bookId 
    * @param selected 
    * @param payload 
    */
    @RequestLine("POST /api/v1/books/{bookId}/thumbnails?selected={selected}")
    @Headers({
        "Content-Type: multipart/form-data"
    })
    ThumbnailBookDto PostBookByBookIDThumbnailsV1(
            @NotNull @Param("bookId") String bookId,
            @Nullable @Param("selected") Boolean selected,
            @NotNull PostBookByBookIDThumbnailsV1B payload
    );

    /**
    * PostBookByBookIDMetadataRefreshV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("POST /api/v1/books/{bookId}/metadata/refresh")
    void PostBookByBookIDMetadataRefreshV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PostBookByBookIDAnalyzeV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("POST /api/v1/books/{bookId}/analyze")
    void PostBookByBookIDAnalyzeV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PostBooksImportV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/books/import")
    @Headers({
        "Content-Type: application/json"
    })
    void PostBooksImportV1(
            @NotNull BookImportBatchDto payload
    );

    /**
    * DeleteUserByIDV2
    * 
    *
    * @param id 
    */
    @RequestLine("DELETE /api/v2/users/{id}")
    void DeleteUserByIDV2(
            @NotNull @Param("id") String id
    );

    /**
    * PatchUserByIDV2
    * 
    *
    * @param id 
    * @param payload 
    */
    @RequestLine("PATCH /api/v2/users/{id}")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchUserByIDV2(
            @NotNull @Param("id") String id,
            @NotNull UserUpdateDto payload
    );

    /**
    * PatchUserByIDPasswordV2
    * 
    *
    * @param id 
    * @param payload 
    */
    @RequestLine("PATCH /api/v2/users/{id}/password")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchUserByIDPasswordV2(
            @NotNull @Param("id") String id,
            @NotNull PasswordUpdateDto payload
    );

    /**
    * PatchUsersMePasswordV2
    * 
    *
    * @param payload 
    */
    @RequestLine("PATCH /api/v2/users/me/password")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchUsersMePasswordV2(
            @NotNull PasswordUpdateDto payload
    );

    /**
    * GetSettingsV1
    * 
    *
    */
    @RequestLine("GET /api/v1/settings")
    SettingsDto GetSettingsV1();

    /**
    * PatchSettingsV1
    * 
    *
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/settings")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchSettingsV1(
            @NotNull SettingsUpdateDto payload
    );

    /**
    * PatchSeriesBySeriesIDMetadataV1
    * 
    *
    * @param seriesId 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/series/{seriesId}/metadata")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchSeriesBySeriesIDMetadataV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull SeriesMetadataUpdateDto payload
    );

    /**
    * GetReadlistByIDV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/readlists/{id}")
    ReadListDto GetReadlistByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * DeleteReadlistByIDV1
    * 
    *
    * @param id 
    */
    @RequestLine("DELETE /api/v1/readlists/{id}")
    void DeleteReadlistByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * PatchReadlistByIDV1
    * 
    *
    * @param id 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/readlists/{id}")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchReadlistByIDV1(
            @NotNull @Param("id") String id,
            @NotNull ReadListUpdateDto payload
    );

    /**
    * GetCollectionByIDV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/collections/{id}")
    CollectionDto GetCollectionByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * DeleteCollectionByIDV1
    * 
    *
    * @param id 
    */
    @RequestLine("DELETE /api/v1/collections/{id}")
    void DeleteCollectionByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * PatchCollectionByIDV1
    * 
    *
    * @param id 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/collections/{id}")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchCollectionByIDV1(
            @NotNull @Param("id") String id,
            @NotNull CollectionUpdateDto payload
    );

    /**
    * DeleteBookByBookIDReadProgressV1
    * 
    * Mark book as unread
    *
    * @param bookId 
    */
    @RequestLine("DELETE /api/v1/books/{bookId}/read-progress")
    void DeleteBookByBookIDReadProgressV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PatchBookByBookIDReadProgressV1
    * 
    * Mark book as read and/or change page progress
    *
    * @param bookId 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/books/{bookId}/read-progress")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchBookByBookIDReadProgressV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull ReadProgressUpdateDto payload
    );

    /**
    * PatchBookByBookIDMetadataV1
    * 
    *
    * @param bookId 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/books/{bookId}/metadata")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchBookByBookIDMetadataV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull BookMetadataUpdateDto payload
    );

    /**
    * PatchBooksMetadataV1
    * 
    *
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/books/metadata")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchBooksMetadataV1(
            @NotNull Map<String, BookMetadataUpdateDto> payload
    );

    /**
    * GetOpdsseriesByIDV2
    * 
    *
    * @param id 
    * @param tag 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/series/{id}?tag={tag}&page={page}")
    FeedDto GetOpdsseriesByIDV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("tag") String tag,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdssearchV2
    * 
    *
    * @param query 
    */
    @RequestLine("GET /opds/v2/search?query={query}")
    FeedDto GetOpdssearchV2(
            @Nullable @Param("query") String query
    );

    /**
    * GetOpdsreadlistByIDV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/readlists/{id}?page={page}")
    FeedDto GetOpdsreadlistByIDV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDSeriesLatestV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/{id}/series/latest?page={page}")
    FeedDto GetOpdslibraryByIDSeriesLatestV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibrariesSeriesLatestV2
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/series/latest?page={page}")
    FeedDto GetOpdslibrariesSeriesLatestV2(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibrariesReadlistsV2
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/readlists?page={page}")
    FeedDto GetOpdslibrariesReadlistsV2(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDReadlistsV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/{id}/readlists?page={page}")
    FeedDto GetOpdslibraryByIDReadlistsV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDOnDeckV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/{id}/on-deck?page={page}")
    FeedDto GetOpdslibraryByIDOnDeckV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibrariesOnDeckV2
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/on-deck?page={page}")
    FeedDto GetOpdslibrariesOnDeckV2(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDKeepReadingV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/{id}/keep-reading?page={page}")
    FeedDto GetOpdslibraryByIDKeepReadingV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibrariesKeepReadingV2
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/keep-reading?page={page}")
    FeedDto GetOpdslibrariesKeepReadingV2(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibrariesCollectionsV2
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/collections?page={page}")
    FeedDto GetOpdslibrariesCollectionsV2(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDCollectionsV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/{id}/collections?page={page}")
    FeedDto GetOpdslibraryByIDCollectionsV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibrariesBrowseV2
    * 
    *
    * @param publisher 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/browse?publisher={publisher}&page={page}")
    FeedDto GetOpdslibrariesBrowseV2(
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDBrowseV2
    * 
    *
    * @param id 
    * @param publisher 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/{id}/browse?publisher={publisher}&page={page}")
    FeedDto GetOpdslibraryByIDBrowseV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibrariesBooksLatestV2
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/books/latest?page={page}")
    FeedDto GetOpdslibrariesBooksLatestV2(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDBooksLatestV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/libraries/{id}/books/latest?page={page}")
    FeedDto GetOpdslibraryByIDBooksLatestV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdslibraryByIDV2
    * 
    *
    * @param id 
    */
    @RequestLine("GET /opds/v2/libraries/{id}")
    FeedDto GetOpdslibraryByIDV2(
            @NotNull @Param("id") String id
    );

    /**
    * GetOpdslibrariesV2
    * 
    *
    */
    @RequestLine("GET /opds/v2/libraries")
    FeedDto GetOpdslibrariesV2();

    /**
    * GetOpdscatalogV2
    * 
    *
    */
    @RequestLine("GET /opds/v2/catalog")
    FeedDto GetOpdscatalogV2();

    /**
    * GetOpdscollectionByIDV2
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v2/collections/{id}?page={page}")
    FeedDto GetOpdscollectionByIDV2(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12SeriesV1
    * 
    *
    * @param search 
    * @param publisher 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/series?search={search}&publisher={publisher}&page={page}")
    OpdsFeed GetOpdsV12SeriesV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12SeriesByIDV1
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/series/{id}?page={page}")
    OpdsFeed GetOpdsV12SeriesByIDV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12SeriesLatestV1
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/series/latest?page={page}")
    OpdsFeed GetOpdsV12SeriesLatestV1(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12SearchV1
    * 
    *
    */
    @RequestLine("GET /opds/v1.2/search")
    OpenSearchDescription GetOpdsV12SearchV1();

    /**
    * GetOpdsV12ReadlistsV1
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/readlists?page={page}")
    OpdsFeed GetOpdsV12ReadlistsV1(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12ReadlistByIDV1
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/readlists/{id}?page={page}")
    OpdsFeed GetOpdsV12ReadlistByIDV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12PublishersV1
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/publishers?page={page}")
    OpdsFeed GetOpdsV12PublishersV1(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12OndeckV1
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/ondeck?page={page}")
    OpdsFeed GetOpdsV12OndeckV1(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12LibrariesV1
    * 
    *
    */
    @RequestLine("GET /opds/v1.2/libraries")
    OpdsFeed GetOpdsV12LibrariesV1();

    /**
    * GetOpdsV12LibraryByIDV1
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/libraries/{id}?page={page}")
    OpdsFeed GetOpdsV12LibraryByIDV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12KeepReadingV1
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/keep-reading?page={page}")
    OpdsFeed GetOpdsV12KeepReadingV1(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12CollectionsV1
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/collections?page={page}")
    OpdsFeed GetOpdsV12CollectionsV1(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12CollectionByIDV1
    * 
    *
    * @param id 
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/collections/{id}?page={page}")
    OpdsFeed GetOpdsV12CollectionByIDV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("page") Integer page
    );

    /**
    * GetOpdsV12CatalogV1
    * 
    *
    */
    @RequestLine("GET /opds/v1.2/catalog")
    OpdsFeed GetOpdsV12CatalogV1();

    /**
    * GetOpdsV12BookByBookIDThumbnailSmallV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /opds/v1.2/books/{bookId}/thumbnail/small")
    void GetOpdsV12BookByBookIDThumbnailSmallV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetOpdsV12BookByBookIDThumbnailV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /opds/v1.2/books/{bookId}/thumbnail")
    void GetOpdsV12BookByBookIDThumbnailV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetOpdsbookByBookIDThumbnailV2
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /opds/v2/books/{bookId}/thumbnail")
    void GetOpdsbookByBookIDThumbnailV2(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetOpdsV12BookByBookIDPageByPageNumberV1
    * 
    *
    * @param bookId 
    * @param pageNumber 
    * @param convert Convert the image to the provided format.
    */
    @RequestLine("GET /opds/v1.2/books/{bookId}/pages/{pageNumber}?convert={convert}")
    void GetOpdsV12BookByBookIDPageByPageNumberV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber,
            @Nullable @Param("convert") String convert
    );

    /**
    * GetOpdsV12BooksLatestV1
    * 
    *
    * @param page Zero-based page index (0..N)
    */
    @RequestLine("GET /opds/v1.2/books/latest?page={page}")
    OpdsFeed GetOpdsV12BooksLatestV1(
            @Nullable @Param("page") Integer page
    );

    /**
    * GetUserByIDAuthenticationActivityLatestV2
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v2/users/{id}/authentication-activity/latest")
    AuthenticationActivityDto GetUserByIDAuthenticationActivityLatestV2(
            @NotNull @Param("id") String id
    );

    /**
    * GetUsersMeV2
    * 
    *
    */
    @RequestLine("GET /api/v2/users/me")
    UserDto GetUsersMeV2();

    /**
    * GetUsersMeAuthenticationActivityV2
    * 
    *
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v2/users/me/authentication-activity?unpaged={unpaged}&page={page}&size={size}&sort={sort}")
    PageAuthenticationActivityDto GetUsersMeAuthenticationActivityV2(
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetUsersAuthenticationActivityV2
    * 
    *
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v2/users/authentication-activity?unpaged={unpaged}&page={page}&size={size}&sort={sort}")
    PageAuthenticationActivityDto GetUsersAuthenticationActivityV2(
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetAuthorsV2
    * 
    *
    * @param search 
    * @param role 
    * @param libraryId 
    * @param collectionId 
    * @param seriesId 
    * @param readlistId 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v2/authors?search={search}&role={role}&libraryId={libraryId}&collectionId={collectionId}&seriesId={seriesId}&readlistId={readlistId}&unpaged={unpaged}&page={page}&size={size}")
    PageAuthorDto GetAuthorsV2(
            @Nullable @Param("search") String search,
            @Nullable @Param("role") String role,
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId,
            @Nullable @Param("seriesId") String seriesId,
            @Nullable @Param("readlistId") String readlistId,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetTransientBookByIDPageByPageNumberV1
    * 
    *
    * @param id 
    * @param pageNumber 
    */
    @RequestLine("GET /api/v1/transient-books/{id}/pages/{pageNumber}")
    Byte[] GetTransientBookByIDPageByPageNumberV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("pageNumber") Integer pageNumber
    );

    /**
    * GetTagsV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/tags?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetTagsV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * GetTagsSeriesV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/tags/series?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetTagsSeriesV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * GetTagsBookV1
    * 
    *
    * @param seriesId 
    * @param readlistId 
    */
    @RequestLine("GET /api/v1/tags/book?seriesId={seriesId}&readlistId={readlistId}")
    String[] GetTagsBookV1(
            @Nullable @Param("seriesId") String seriesId,
            @Nullable @Param("readlistId") String readlistId
    );

    /**
    * GetSharingLabelsV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/sharing-labels?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetSharingLabelsV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * GetSeriesV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param collectionId 
    * @param status 
    * @param readStatus 
    * @param publisher 
    * @param language 
    * @param genre 
    * @param tag 
    * @param ageRating 
    * @param releaseYear 
    * @param sharingLabel 
    * @param deleted 
    * @param complete 
    * @param oneshot 
    * @param unpaged 
    * @param searchRegex Search by regex criteria, in the form: regex,field. Supported fields are TITLE and TITLE_SORT.
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/series?search={search}&libraryId={libraryId}&collectionId={collectionId}&status={status}&readStatus={readStatus}&publisher={publisher}&language={language}&genre={genre}&tag={tag}&ageRating={ageRating}&releaseYear={releaseYear}&sharingLabel={sharingLabel}&deleted={deleted}&complete={complete}&oneshot={oneshot}&unpaged={unpaged}&searchRegex={searchRegex}&page={page}&size={size}&sort={sort}&author={author}")
    PageSeriesDto GetSeriesV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("collectionId") String[] collectionId,
            @Nullable @Param("status") String[] status,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("language") String[] language,
            @Nullable @Param("genre") String[] genre,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("ageRating") String[] ageRating,
            @Nullable @Param("releaseYear") String[] releaseYear,
            @Nullable @Param("sharingLabel") String[] sharingLabel,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("complete") Boolean complete,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("searchRegex") String searchRegex,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort,
            @Nullable @Param("author") String[] author
    );

    /**
    * GetSeriesBySeriesIDV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}")
    SeriesDto GetSeriesBySeriesIDV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDThumbnailByThumbnailIDV1
    * 
    *
    * @param seriesId 
    * @param thumbnailId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/thumbnails/{thumbnailId}")
    void GetSeriesBySeriesIDThumbnailByThumbnailIDV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * DeleteSeriesBySeriesIDThumbnailByThumbnailIDV1
    * 
    *
    * @param seriesId 
    * @param thumbnailId 
    */
    @RequestLine("DELETE /api/v1/series/{seriesId}/thumbnails/{thumbnailId}")
    void DeleteSeriesBySeriesIDThumbnailByThumbnailIDV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetSeriesBySeriesIDThumbnailV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/thumbnail")
    void GetSeriesBySeriesIDThumbnailV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDFileV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/file")
    Object GetSeriesBySeriesIDFileV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * DeleteSeriesBySeriesIDFileV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("DELETE /api/v1/series/{seriesId}/file")
    void DeleteSeriesBySeriesIDFileV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDCollectionsV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/collections")
    CollectionDto[] GetSeriesBySeriesIDCollectionsV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDBooksV1
    * 
    *
    * @param seriesId 
    * @param mediaStatus 
    * @param readStatus 
    * @param tag 
    * @param deleted 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/series/{seriesId}/books?mediaStatus={mediaStatus}&readStatus={readStatus}&tag={tag}&deleted={deleted}&unpaged={unpaged}&page={page}&size={size}&sort={sort}&author={author}")
    PageBookDto GetSeriesBySeriesIDBooksV1(
            @NotNull @Param("seriesId") String seriesId,
            @Nullable @Param("mediaStatus") String[] mediaStatus,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort,
            @Nullable @Param("author") String[] author
    );

    /**
    * GetSeriesUpdatedV1
    * 
    * Return recently updated series, but not newly added ones.
    *
    * @param libraryId 
    * @param deleted 
    * @param oneshot 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/series/updated?libraryId={libraryId}&deleted={deleted}&oneshot={oneshot}&unpaged={unpaged}&page={page}&size={size}")
    PageSeriesDto GetSeriesUpdatedV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetSeriesReleaseDatesV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/series/release-dates?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetSeriesReleaseDatesV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * GetSeriesNewV1
    * 
    * Return newly added series.
    *
    * @param libraryId 
    * @param deleted 
    * @param oneshot 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/series/new?libraryId={libraryId}&deleted={deleted}&oneshot={oneshot}&unpaged={unpaged}&page={page}&size={size}")
    PageSeriesDto GetSeriesNewV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetSeriesLatestV1
    * 
    * Return recently added or updated series.
    *
    * @param libraryId 
    * @param deleted 
    * @param oneshot 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/series/latest?libraryId={libraryId}&deleted={deleted}&oneshot={oneshot}&unpaged={unpaged}&page={page}&size={size}")
    PageSeriesDto GetSeriesLatestV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetSeriesAlphabeticalGroupsV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param collectionId 
    * @param status 
    * @param readStatus 
    * @param publisher 
    * @param language 
    * @param genre 
    * @param tag 
    * @param ageRating 
    * @param releaseYear 
    * @param sharingLabel 
    * @param deleted 
    * @param complete 
    * @param oneshot 
    * @param searchRegex Search by regex criteria, in the form: regex,field. Supported fields are TITLE and TITLE_SORT.
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/series/alphabetical-groups?search={search}&libraryId={libraryId}&collectionId={collectionId}&status={status}&readStatus={readStatus}&publisher={publisher}&language={language}&genre={genre}&tag={tag}&ageRating={ageRating}&releaseYear={releaseYear}&sharingLabel={sharingLabel}&deleted={deleted}&complete={complete}&oneshot={oneshot}&searchRegex={searchRegex}&author={author}")
    GroupCountDto[] GetSeriesAlphabeticalGroupsV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("collectionId") String[] collectionId,
            @Nullable @Param("status") String[] status,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("language") String[] language,
            @Nullable @Param("genre") String[] genre,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("ageRating") String[] ageRating,
            @Nullable @Param("releaseYear") String[] releaseYear,
            @Nullable @Param("sharingLabel") String[] sharingLabel,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("complete") Boolean complete,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("searchRegex") String searchRegex,
            @Nullable @Param("author") String[] author
    );

    /**
    * GetReadlistByIDThumbnailByThumbnailIDV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("GET /api/v1/readlists/{id}/thumbnails/{thumbnailId}")
    void GetReadlistByIDThumbnailByThumbnailIDV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * DeleteReadlistByIDThumbnailByThumbnailIDV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("DELETE /api/v1/readlists/{id}/thumbnails/{thumbnailId}")
    void DeleteReadlistByIDThumbnailByThumbnailIDV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetReadlistByIDThumbnailV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/readlists/{id}/thumbnail")
    void GetReadlistByIDThumbnailV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetReadlistByIDFileV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/readlists/{id}/file")
    Object GetReadlistByIDFileV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetReadlistByIDBooksV1
    * 
    *
    * @param id 
    * @param libraryId 
    * @param readStatus 
    * @param tag 
    * @param mediaStatus 
    * @param deleted 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/readlists/{id}/books?libraryId={libraryId}&readStatus={readStatus}&tag={tag}&mediaStatus={mediaStatus}&deleted={deleted}&unpaged={unpaged}&page={page}&size={size}&author={author}")
    PageBookDto GetReadlistByIDBooksV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("mediaStatus") String[] mediaStatus,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("author") String[] author
    );

    /**
    * GetReadlistByIDBookByBookIDPreviousV1
    * 
    *
    * @param id 
    * @param bookId 
    */
    @RequestLine("GET /api/v1/readlists/{id}/books/{bookId}/previous")
    BookDto GetReadlistByIDBookByBookIDPreviousV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetReadlistByIDBookByBookIDNextV1
    * 
    *
    * @param id 
    * @param bookId 
    */
    @RequestLine("GET /api/v1/readlists/{id}/books/{bookId}/next")
    BookDto GetReadlistByIDBookByBookIDNextV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetPublishersV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/publishers?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetPublishersV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * GetPageHashByPageHashV1
    * 
    *
    * @param pageHash 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/page-hashes/{pageHash}?page={page}&size={size}&sort={sort}")
    PagePageHashMatchDto GetPageHashByPageHashV1(
            @NotNull @Param("pageHash") String pageHash,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetPageHashByPageHashThumbnailV1
    * 
    *
    * @param pageHash 
    */
    @RequestLine("GET /api/v1/page-hashes/{pageHash}/thumbnail")
    void GetPageHashByPageHashThumbnailV1(
            @NotNull @Param("pageHash") String pageHash
    );

    /**
    * GetPageHashesUnknownV1
    * 
    *
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/page-hashes/unknown?page={page}&size={size}&sort={sort}")
    PagePageHashUnknownDto GetPageHashesUnknownV1(
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetPageHashesUnknownByPageHashThumbnailV1
    * 
    *
    * @param pageHash 
    * @param resize 
    */
    @RequestLine("GET /api/v1/page-hashes/unknown/{pageHash}/thumbnail?resize={resize}")
    void GetPageHashesUnknownByPageHashThumbnailV1(
            @NotNull @Param("pageHash") String pageHash,
            @Nullable @Param("resize") Integer resize
    );

    /**
    * GetLoginSetCookieV1
    * 
    *
    */
    @RequestLine("GET /api/v1/login/set-cookie")
    void GetLoginSetCookieV1();

    /**
    * GetLanguagesV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/languages?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetLanguagesV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * GetHistoryV1
    * 
    *
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/history?page={page}&size={size}&sort={sort}")
    PageHistoricalEventDto GetHistoryV1(
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetGenresV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/genres?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetGenresV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * GetCollectionByIDThumbnailByThumbnailIDV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("GET /api/v1/collections/{id}/thumbnails/{thumbnailId}")
    void GetCollectionByIDThumbnailByThumbnailIDV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * DeleteCollectionByIDThumbnailByThumbnailIDV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("DELETE /api/v1/collections/{id}/thumbnails/{thumbnailId}")
    void DeleteCollectionByIDThumbnailByThumbnailIDV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetCollectionByIDThumbnailV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/collections/{id}/thumbnail")
    void GetCollectionByIDThumbnailV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetCollectionByIDSeriesV1
    * 
    *
    * @param id 
    * @param libraryId 
    * @param status 
    * @param readStatus 
    * @param publisher 
    * @param language 
    * @param genre 
    * @param tag 
    * @param ageRating 
    * @param releaseYears 
    * @param deleted 
    * @param complete 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/collections/{id}/series?libraryId={libraryId}&status={status}&readStatus={readStatus}&publisher={publisher}&language={language}&genre={genre}&tag={tag}&ageRating={ageRating}&releaseYears={releaseYears}&deleted={deleted}&complete={complete}&unpaged={unpaged}&page={page}&size={size}&author={author}")
    PageSeriesDto GetCollectionByIDSeriesV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("status") String[] status,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("language") String[] language,
            @Nullable @Param("genre") String[] genre,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("ageRating") String[] ageRating,
            @Nullable @Param("releaseYears") String[] releaseYears,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("complete") Boolean complete,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("author") String[] author
    );

    /**
    * GetBooksV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param mediaStatus 
    * @param readStatus 
    * @param releasedAfter 
    * @param tag 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/books?search={search}&libraryId={libraryId}&mediaStatus={mediaStatus}&readStatus={readStatus}&releasedAfter={releasedAfter}&tag={tag}&unpaged={unpaged}&page={page}&size={size}&sort={sort}")
    PageBookDto GetBooksV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("mediaStatus") String[] mediaStatus,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("releasedAfter") java.time.Instant releasedAfter,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetBookByBookIDV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}")
    BookDto GetBookByBookIDV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDThumbnailByThumbnailIDV1
    * 
    *
    * @param bookId 
    * @param thumbnailId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/thumbnails/{thumbnailId}")
    void GetBookByBookIDThumbnailByThumbnailIDV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * DeleteBookByBookIDThumbnailByThumbnailIDV1
    * 
    *
    * @param bookId 
    * @param thumbnailId 
    */
    @RequestLine("DELETE /api/v1/books/{bookId}/thumbnails/{thumbnailId}")
    void DeleteBookByBookIDThumbnailByThumbnailIDV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetBookByBookIDThumbnailV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/thumbnail")
    void GetBookByBookIDThumbnailV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDReadlistsV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/readlists")
    ReadListDto[] GetBookByBookIDReadlistsV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDPreviousV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/previous")
    BookDto GetBookByBookIDPreviousV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDPagesV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages")
    PageDto[] GetBookByBookIDPagesV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDPageByPageNumberV1
    * 
    *
    * @param bookId 
    * @param pageNumber 
    * @param convert Convert the image to the provided format.
    * @param zeroBased If set to true, pages will start at index 0. If set to false, pages will start at index 1.
    * @param accept Some very limited server driven content negotiation is handled. If a book is a PDF book, and the Accept header contains 'application/pdf' as a more specific type than other 'image/' types, a raw PDF page will be returned.
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages/{pageNumber}?convert={convert}&zeroBased={zeroBased}")
    @Headers({
        "Accept: {accept}"
    })
    void GetBookByBookIDPageByPageNumberV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber,
            @Nullable @Param("convert") String convert,
            @Nullable @Param("zeroBased") Boolean zeroBased,
            @Nullable @Param("accept") MediaType[] accept
    );

    /**
    * GetBookByBookIDPageByPageNumberThumbnailV1
    * 
    *
    * @param bookId 
    * @param pageNumber 
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages/{pageNumber}/thumbnail")
    void GetBookByBookIDPageByPageNumberThumbnailV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber
    );

    /**
    * GetBookByBookIDPageByPageNumberRawV1
    * 
    *
    * @param bookId 
    * @param pageNumber 
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages/{pageNumber}/raw")
    Byte[] GetBookByBookIDPageByPageNumberRawV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber
    );

    /**
    * GetBookByBookIDNextV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/next")
    BookDto GetBookByBookIDNextV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDManifestV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/manifest")
    WppublicationDto GetBookByBookIDManifestV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDManifestPdfV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/manifest/pdf")
    WppublicationDto GetBookByBookIDManifestPdfV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDManifestDivinaV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/manifest/divina")
    WppublicationDto GetBookByBookIDManifestDivinaV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDFileV1
    * 
    * Download the book file.
    *
    * @param bookId 
    */
    @RequestLine("GET /api/v1/books/{bookId}/file")
    Object GetBookByBookIDFileV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * DeleteBookByBookIDFileV1
    * 
    *
    * @param bookId 
    */
    @RequestLine("DELETE /api/v1/books/{bookId}/file")
    void DeleteBookByBookIDFileV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetOpdsV12BookByBookIDFileV1
    * 
    * Download the book file.
    *
    * @param bookId 
    */
    @RequestLine("GET /opds/v1.2/books/{bookId}/file/*")
    Object GetOpdsV12BookByBookIDFileV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBooksOndeckV1
    * 
    * Return first unread book of series with at least one book read and no books in progress.
    *
    * @param libraryId 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/books/ondeck?libraryId={libraryId}&page={page}&size={size}")
    PageBookDto GetBooksOndeckV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetBooksLatestV1
    * 
    * Return newly added or updated books.
    *
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/books/latest?unpaged={unpaged}&page={page}&size={size}")
    PageBookDto GetBooksLatestV1(
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetBooksDuplicatesV1
    * 
    *
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/books/duplicates?unpaged={unpaged}&page={page}&size={size}&sort={sort}")
    PageBookDto GetBooksDuplicatesV1(
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetAuthorsV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param collectionId 
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/authors?search={search}&libraryId={libraryId}&collectionId={collectionId}&seriesId={seriesId}")
    AuthorDto[] GetAuthorsV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId,
            @Nullable @Param("seriesId") String seriesId
    );

    /**
    * GetAuthorsRolesV1
    * 
    *
    */
    @RequestLine("GET /api/v1/authors/roles")
    String[] GetAuthorsRolesV1();

    /**
    * GetAuthorsNamesV1
    * 
    *
    * @param search 
    */
    @RequestLine("GET /api/v1/authors/names?search={search}")
    String[] GetAuthorsNamesV1(
            @Nullable @Param("search") String search
    );

    /**
    * GetAgeRatingsV1
    * 
    *
    * @param libraryId 
    * @param collectionId 
    */
    @RequestLine("GET /api/v1/age-ratings?libraryId={libraryId}&collectionId={collectionId}")
    String[] GetAgeRatingsV1(
            @Nullable @Param("libraryId") String libraryId,
            @Nullable @Param("collectionId") String collectionId
    );

    /**
    * DeleteTasksV1
    * 
    *
    */
    @RequestLine("DELETE /api/v1/tasks")
    Integer DeleteTasksV1();

    /**
    * GetOauth2ProvIDErsV1
    * 
    *
    */
    @RequestLine("GET /api/v1/oauth2/providers")
    Oauth2ClientDto[] GetOauth2ProvIDErsV1();

    /**
    * PutOauth2ProvIDErsV1
    * 
    *
    */
    @RequestLine("PUT /api/v1/oauth2/providers")
    Oauth2ClientDto[] PutOauth2ProvIDErsV1();

    /**
    * PostOauth2ProvIDErsV1
    * 
    *
    */
    @RequestLine("POST /api/v1/oauth2/providers")
    Oauth2ClientDto[] PostOauth2ProvIDErsV1();

    /**
    * DeleteOauth2ProvIDErsV1
    * 
    *
    */
    @RequestLine("DELETE /api/v1/oauth2/providers")
    Oauth2ClientDto[] DeleteOauth2ProvIDErsV1();

    /**
    * OptionsOauth2ProvIDErsV1
    * 
    *
    */
    @RequestLine("OPTIONS /api/v1/oauth2/providers")
    Oauth2ClientDto[] OptionsOauth2ProvIDErsV1();

    /**
    * HeadOauth2ProvIDErsV1
    * 
    *
    */
    @RequestLine("HEAD /api/v1/oauth2/providers")
    Oauth2ClientDto[] HeadOauth2ProvIDErsV1();

    /**
    * PatchOauth2ProvIDErsV1
    * 
    *
    */
    @RequestLine("PATCH /api/v1/oauth2/providers")
    Oauth2ClientDto[] PatchOauth2ProvIDErsV1();

}
