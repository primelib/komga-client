// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.komga.client.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.komga.client.models.CollectionCreationDto;
import io.github.primelib.komga.client.models.CollectionDto;
import io.github.primelib.komga.client.models.CollectionUpdateDto;
import io.github.primelib.komga.client.models.PageCollectionDto;
import io.github.primelib.komga.client.models.PageSeriesDto;
import io.github.primelib.komga.client.models.PostCollectionByIDThumbnailsV1B;
import io.github.primelib.komga.client.models.ThumbnailSeriesCollectionDto;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * KomgaClientseriesCollectionControllerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface KomgaClientseriesCollectionControllerApi {

    /**
    * PutCollectionByIDThumbnailByThumbnailIDSelectedV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("PUT /api/v1/collections/{id}/thumbnails/{thumbnailId}/selected")
    void PutCollectionByIDThumbnailByThumbnailIDSelectedV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetCollectionsV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/collections?search={search}&libraryId={libraryId}&unpaged={unpaged}&page={page}&size={size}")
    PageCollectionDto GetCollectionsV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * PostCollectionsV1
    * 
    *
    * @param payload 
    */
    @RequestLine("POST /api/v1/collections")
    @Headers({
        "Content-Type: application/json"
    })
    CollectionDto PostCollectionsV1(
            @NotNull CollectionCreationDto payload
    );

    /**
    * GetCollectionByIDThumbnailsV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/collections/{id}/thumbnails")
    ThumbnailSeriesCollectionDto[] GetCollectionByIDThumbnailsV1(
            @NotNull @Param("id") String id
    );

    /**
    * PostCollectionByIDThumbnailsV1
    * 
    *
    * @param id 
    * @param selected 
    * @param payload 
    */
    @RequestLine("POST /api/v1/collections/{id}/thumbnails?selected={selected}")
    @Headers({
        "Content-Type: multipart/form-data"
    })
    ThumbnailSeriesCollectionDto PostCollectionByIDThumbnailsV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("selected") Boolean selected,
            @NotNull PostCollectionByIDThumbnailsV1B payload
    );

    /**
    * GetCollectionByIDV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/collections/{id}")
    CollectionDto GetCollectionByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * DeleteCollectionByIDV1
    * 
    *
    * @param id 
    */
    @RequestLine("DELETE /api/v1/collections/{id}")
    void DeleteCollectionByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * PatchCollectionByIDV1
    * 
    *
    * @param id 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/collections/{id}")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchCollectionByIDV1(
            @NotNull @Param("id") String id,
            @NotNull CollectionUpdateDto payload
    );

    /**
    * GetCollectionByIDThumbnailByThumbnailIDV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("GET /api/v1/collections/{id}/thumbnails/{thumbnailId}")
    void GetCollectionByIDThumbnailByThumbnailIDV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * DeleteCollectionByIDThumbnailByThumbnailIDV1
    * 
    *
    * @param id 
    * @param thumbnailId 
    */
    @RequestLine("DELETE /api/v1/collections/{id}/thumbnails/{thumbnailId}")
    void DeleteCollectionByIDThumbnailByThumbnailIDV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetCollectionByIDThumbnailV1
    * 
    *
    * @param id 
    */
    @RequestLine("GET /api/v1/collections/{id}/thumbnail")
    void GetCollectionByIDThumbnailV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetCollectionByIDSeriesV1
    * 
    *
    * @param id 
    * @param libraryId 
    * @param status 
    * @param readStatus 
    * @param publisher 
    * @param language 
    * @param genre 
    * @param tag 
    * @param ageRating 
    * @param releaseYears 
    * @param deleted 
    * @param complete 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/collections/{id}/series?libraryId={libraryId}&status={status}&readStatus={readStatus}&publisher={publisher}&language={language}&genre={genre}&tag={tag}&ageRating={ageRating}&releaseYears={releaseYears}&deleted={deleted}&complete={complete}&unpaged={unpaged}&page={page}&size={size}&author={author}")
    PageSeriesDto GetCollectionByIDSeriesV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("status") String[] status,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("language") String[] language,
            @Nullable @Param("genre") String[] genre,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("ageRating") String[] ageRating,
            @Nullable @Param("releaseYears") String[] releaseYears,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("complete") Boolean complete,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("author") String[] author
    );

}
