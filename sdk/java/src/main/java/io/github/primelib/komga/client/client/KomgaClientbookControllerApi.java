// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.komga.client.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.komga.client.models.BookDto;
import io.github.primelib.komga.client.models.BookImportBatchDto;
import io.github.primelib.komga.client.models.BookMetadataUpdateDto;
import io.github.primelib.komga.client.models.MediaType;
import io.github.primelib.komga.client.models.PageBookDto;
import io.github.primelib.komga.client.models.PageDto;
import io.github.primelib.komga.client.models.PostBookByBookIDThumbnailsV1B;
import io.github.primelib.komga.client.models.ReadListDto;
import io.github.primelib.komga.client.models.ReadProgressUpdateDto;
import io.github.primelib.komga.client.models.ThumbnailBookDto;
import io.github.primelib.komga.client.models.WppublicationDto;
import java.util.Map;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * KomgaClientbookControllerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface KomgaClientbookControllerApi {

    /**
    * PutBookByBookIDThumbnailByThumbnailIDSelectedV1
    *
    *
    * @param bookId
    * @param thumbnailId
    */
    @RequestLine("PUT /api/v1/books/{bookId}/thumbnails/{thumbnailId}/selected")
    void PutBookByBookIDThumbnailByThumbnailIDSelectedV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * PutBooksThumbnailsV1
    *
    *
    * @param forBiggerResultOnly
    */
    @RequestLine("PUT /api/v1/books/thumbnails?forBiggerResultOnly={forBiggerResultOnly}")
    void PutBooksThumbnailsV1(
            @Nullable @Param("forBiggerResultOnly") Boolean forBiggerResultOnly
    );

    /**
    * GetBookByBookIDThumbnailsV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/thumbnails")
    ThumbnailBookDto[] GetBookByBookIDThumbnailsV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PostBookByBookIDThumbnailsV1
    *
    *
    * @param bookId
    * @param selected
    * @param payload
    */
    @RequestLine("POST /api/v1/books/{bookId}/thumbnails?selected={selected}")
    @Headers({
        "Content-Type: multipart/form-data"
    })
    ThumbnailBookDto PostBookByBookIDThumbnailsV1(
            @NotNull @Param("bookId") String bookId,
            @Nullable @Param("selected") Boolean selected,
            @NotNull PostBookByBookIDThumbnailsV1B payload
    );

    /**
    * PostBookByBookIDMetadataRefreshV1
    *
    *
    * @param bookId
    */
    @RequestLine("POST /api/v1/books/{bookId}/metadata/refresh")
    void PostBookByBookIDMetadataRefreshV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PostBookByBookIDAnalyzeV1
    *
    *
    * @param bookId
    */
    @RequestLine("POST /api/v1/books/{bookId}/analyze")
    void PostBookByBookIDAnalyzeV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PostBooksImportV1
    *
    *
    * @param payload
    */
    @RequestLine("POST /api/v1/books/import")
    @Headers({
        "Content-Type: application/json"
    })
    void PostBooksImportV1(
            @NotNull BookImportBatchDto payload
    );

    /**
    * DeleteBookByBookIDReadProgressV1
    *
    * Mark book as unread
    *
    * @param bookId
    */
    @RequestLine("DELETE /api/v1/books/{bookId}/read-progress")
    void DeleteBookByBookIDReadProgressV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * PatchBookByBookIDReadProgressV1
    *
    * Mark book as read and/or change page progress
    *
    * @param bookId
    * @param payload
    */
    @RequestLine("PATCH /api/v1/books/{bookId}/read-progress")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchBookByBookIDReadProgressV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull ReadProgressUpdateDto payload
    );

    /**
    * PatchBookByBookIDMetadataV1
    *
    *
    * @param bookId
    * @param payload
    */
    @RequestLine("PATCH /api/v1/books/{bookId}/metadata")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchBookByBookIDMetadataV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull BookMetadataUpdateDto payload
    );

    /**
    * PatchBooksMetadataV1
    *
    *
    * @param payload
    */
    @RequestLine("PATCH /api/v1/books/metadata")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchBooksMetadataV1(
            @NotNull Map<String, BookMetadataUpdateDto> payload
    );

    /**
    * GetOpdsV12BookByBookIDPageByPageNumberV1
    *
    *
    * @param bookId
    * @param pageNumber
    * @param convert Convert the image to the provided format.
    */
    @RequestLine("GET /opds/v1.2/books/{bookId}/pages/{pageNumber}?convert={convert}")
    void GetOpdsV12BookByBookIDPageByPageNumberV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber,
            @Nullable @Param("convert") String convert
    );

    /**
    * GetBooksV1
    *
    *
    * @param search
    * @param libraryId
    * @param mediaStatus
    * @param readStatus
    * @param releasedAfter
    * @param tag
    * @param unpaged
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/books?search={search}&libraryId={libraryId}&mediaStatus={mediaStatus}&readStatus={readStatus}&releasedAfter={releasedAfter}&tag={tag}&unpaged={unpaged}&page={page}&size={size}&sort={sort}")
    PageBookDto GetBooksV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("mediaStatus") String[] mediaStatus,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("releasedAfter") java.time.Instant releasedAfter,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

    /**
    * GetBookByBookIDV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}")
    BookDto GetBookByBookIDV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDThumbnailByThumbnailIDV1
    *
    *
    * @param bookId
    * @param thumbnailId
    */
    @RequestLine("GET /api/v1/books/{bookId}/thumbnails/{thumbnailId}")
    void GetBookByBookIDThumbnailByThumbnailIDV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * DeleteBookByBookIDThumbnailByThumbnailIDV1
    *
    *
    * @param bookId
    * @param thumbnailId
    */
    @RequestLine("DELETE /api/v1/books/{bookId}/thumbnails/{thumbnailId}")
    void DeleteBookByBookIDThumbnailByThumbnailIDV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetBookByBookIDThumbnailV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/thumbnail")
    void GetBookByBookIDThumbnailV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDReadlistsV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/readlists")
    ReadListDto[] GetBookByBookIDReadlistsV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDPreviousV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/previous")
    BookDto GetBookByBookIDPreviousV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDPagesV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages")
    PageDto[] GetBookByBookIDPagesV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDPageByPageNumberV1
    *
    *
    * @param bookId
    * @param pageNumber
    * @param convert Convert the image to the provided format.
    * @param zeroBased If set to true, pages will start at index 0. If set to false, pages will start at index 1.
    * @param accept Some very limited server driven content negotiation is handled. If a book is a PDF book, and the Accept header contains 'application/pdf' as a more specific type than other 'image/' types, a raw PDF page will be returned.
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages/{pageNumber}?convert={convert}&zeroBased={zeroBased}")
    @Headers({
        "Accept: {accept}"
    })
    void GetBookByBookIDPageByPageNumberV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber,
            @Nullable @Param("convert") String convert,
            @Nullable @Param("zeroBased") Boolean zeroBased,
            @Nullable @Param("accept") MediaType[] accept
    );

    /**
    * GetBookByBookIDPageByPageNumberThumbnailV1
    *
    *
    * @param bookId
    * @param pageNumber
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages/{pageNumber}/thumbnail")
    void GetBookByBookIDPageByPageNumberThumbnailV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber
    );

    /**
    * GetBookByBookIDPageByPageNumberRawV1
    *
    *
    * @param bookId
    * @param pageNumber
    */
    @RequestLine("GET /api/v1/books/{bookId}/pages/{pageNumber}/raw")
    Byte[] GetBookByBookIDPageByPageNumberRawV1(
            @NotNull @Param("bookId") String bookId,
            @NotNull @Param("pageNumber") Integer pageNumber
    );

    /**
    * GetBookByBookIDNextV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/next")
    BookDto GetBookByBookIDNextV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDManifestV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/manifest")
    WppublicationDto GetBookByBookIDManifestV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDManifestPdfV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/manifest/pdf")
    WppublicationDto GetBookByBookIDManifestPdfV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDManifestDivinaV1
    *
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/manifest/divina")
    WppublicationDto GetBookByBookIDManifestDivinaV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBookByBookIDFileV1
    *
    * Download the book file.
    *
    * @param bookId
    */
    @RequestLine("GET /api/v1/books/{bookId}/file")
    Object GetBookByBookIDFileV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * DeleteBookByBookIDFileV1
    *
    *
    * @param bookId
    */
    @RequestLine("DELETE /api/v1/books/{bookId}/file")
    void DeleteBookByBookIDFileV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetOpdsV12BookByBookIDFileV1
    *
    * Download the book file.
    *
    * @param bookId
    */
    @RequestLine("GET /opds/v1.2/books/{bookId}/file/*")
    Object GetOpdsV12BookByBookIDFileV1(
            @NotNull @Param("bookId") String bookId
    );

    /**
    * GetBooksOndeckV1
    *
    * Return first unread book of series with at least one book read and no books in progress.
    *
    * @param libraryId
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/books/ondeck?libraryId={libraryId}&page={page}&size={size}")
    PageBookDto GetBooksOndeckV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetBooksLatestV1
    *
    * Return newly added or updated books.
    *
    * @param unpaged
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/books/latest?unpaged={unpaged}&page={page}&size={size}")
    PageBookDto GetBooksLatestV1(
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetBooksDuplicatesV1
    *
    *
    * @param unpaged
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    */
    @RequestLine("GET /api/v1/books/duplicates?unpaged={unpaged}&page={page}&size={size}&sort={sort}")
    PageBookDto GetBooksDuplicatesV1(
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort
    );

}
