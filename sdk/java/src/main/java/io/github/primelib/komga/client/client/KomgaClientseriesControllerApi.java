// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.komga.client.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.komga.client.models.CollectionDto;
import io.github.primelib.komga.client.models.GroupCountDto;
import io.github.primelib.komga.client.models.PageBookDto;
import io.github.primelib.komga.client.models.PageSeriesDto;
import io.github.primelib.komga.client.models.PostSeriesBySeriesIDThumbnailsV1B;
import io.github.primelib.komga.client.models.SeriesDto;
import io.github.primelib.komga.client.models.SeriesMetadataUpdateDto;
import io.github.primelib.komga.client.models.TachiyomiReadProgressUpdateV2Dto;
import io.github.primelib.komga.client.models.TachiyomiReadProgressV2Dto;
import io.github.primelib.komga.client.models.ThumbnailSeriesDto;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * KomgaClientseriesControllerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface KomgaClientseriesControllerApi {

    /**
    * GetSeriesBySeriesIDReadProgressTachiyomiV2
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v2/series/{seriesId}/read-progress/tachiyomi")
    TachiyomiReadProgressV2Dto GetSeriesBySeriesIDReadProgressTachiyomiV2(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PutSeriesBySeriesIDReadProgressTachiyomiV2
    * 
    *
    * @param seriesId 
    * @param payload 
    */
    @RequestLine("PUT /api/v2/series/{seriesId}/read-progress/tachiyomi")
    @Headers({
        "Content-Type: application/json"
    })
    void PutSeriesBySeriesIDReadProgressTachiyomiV2(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull TachiyomiReadProgressUpdateV2Dto payload
    );

    /**
    * PutSeriesBySeriesIDThumbnailByThumbnailIDSelectedV1
    * 
    *
    * @param seriesId 
    * @param thumbnailId 
    */
    @RequestLine("PUT /api/v1/series/{seriesId}/thumbnails/{thumbnailId}/selected")
    void PutSeriesBySeriesIDThumbnailByThumbnailIDSelectedV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetSeriesBySeriesIDThumbnailsV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/thumbnails")
    ThumbnailSeriesDto[] GetSeriesBySeriesIDThumbnailsV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PostSeriesBySeriesIDThumbnailsV1
    * 
    *
    * @param seriesId 
    * @param selected 
    * @param payload 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/thumbnails?selected={selected}")
    @Headers({
        "Content-Type: multipart/form-data"
    })
    ThumbnailSeriesDto PostSeriesBySeriesIDThumbnailsV1(
            @NotNull @Param("seriesId") String seriesId,
            @Nullable @Param("selected") Boolean selected,
            @NotNull PostSeriesBySeriesIDThumbnailsV1B payload
    );

    /**
    * PostSeriesBySeriesIDReadProgressV1
    * 
    * Mark all book for series as read
    *
    * @param seriesId 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/read-progress")
    void PostSeriesBySeriesIDReadProgressV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * DeleteSeriesBySeriesIDReadProgressV1
    * 
    * Mark all book for series as unread
    *
    * @param seriesId 
    */
    @RequestLine("DELETE /api/v1/series/{seriesId}/read-progress")
    void DeleteSeriesBySeriesIDReadProgressV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PostSeriesBySeriesIDMetadataRefreshV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/metadata/refresh")
    void PostSeriesBySeriesIDMetadataRefreshV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PostSeriesBySeriesIDAnalyzeV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("POST /api/v1/series/{seriesId}/analyze")
    void PostSeriesBySeriesIDAnalyzeV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * PatchSeriesBySeriesIDMetadataV1
    * 
    *
    * @param seriesId 
    * @param payload 
    */
    @RequestLine("PATCH /api/v1/series/{seriesId}/metadata")
    @Headers({
        "Content-Type: application/json"
    })
    void PatchSeriesBySeriesIDMetadataV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull SeriesMetadataUpdateDto payload
    );

    /**
    * GetSeriesV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param collectionId 
    * @param status 
    * @param readStatus 
    * @param publisher 
    * @param language 
    * @param genre 
    * @param tag 
    * @param ageRating 
    * @param releaseYear 
    * @param sharingLabel 
    * @param deleted 
    * @param complete 
    * @param oneshot 
    * @param unpaged 
    * @param searchRegex Search by regex criteria, in the form: regex,field. Supported fields are TITLE and TITLE_SORT.
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/series?search={search}&libraryId={libraryId}&collectionId={collectionId}&status={status}&readStatus={readStatus}&publisher={publisher}&language={language}&genre={genre}&tag={tag}&ageRating={ageRating}&releaseYear={releaseYear}&sharingLabel={sharingLabel}&deleted={deleted}&complete={complete}&oneshot={oneshot}&unpaged={unpaged}&searchRegex={searchRegex}&page={page}&size={size}&sort={sort}&author={author}")
    PageSeriesDto GetSeriesV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("collectionId") String[] collectionId,
            @Nullable @Param("status") String[] status,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("language") String[] language,
            @Nullable @Param("genre") String[] genre,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("ageRating") String[] ageRating,
            @Nullable @Param("releaseYear") String[] releaseYear,
            @Nullable @Param("sharingLabel") String[] sharingLabel,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("complete") Boolean complete,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("searchRegex") String searchRegex,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort,
            @Nullable @Param("author") String[] author
    );

    /**
    * GetSeriesBySeriesIDV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}")
    SeriesDto GetSeriesBySeriesIDV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDThumbnailByThumbnailIDV1
    * 
    *
    * @param seriesId 
    * @param thumbnailId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/thumbnails/{thumbnailId}")
    void GetSeriesBySeriesIDThumbnailByThumbnailIDV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * DeleteSeriesBySeriesIDThumbnailByThumbnailIDV1
    * 
    *
    * @param seriesId 
    * @param thumbnailId 
    */
    @RequestLine("DELETE /api/v1/series/{seriesId}/thumbnails/{thumbnailId}")
    void DeleteSeriesBySeriesIDThumbnailByThumbnailIDV1(
            @NotNull @Param("seriesId") String seriesId,
            @NotNull @Param("thumbnailId") String thumbnailId
    );

    /**
    * GetSeriesBySeriesIDThumbnailV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/thumbnail")
    void GetSeriesBySeriesIDThumbnailV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDFileV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/file")
    Object GetSeriesBySeriesIDFileV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * DeleteSeriesBySeriesIDFileV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("DELETE /api/v1/series/{seriesId}/file")
    void DeleteSeriesBySeriesIDFileV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDCollectionsV1
    * 
    *
    * @param seriesId 
    */
    @RequestLine("GET /api/v1/series/{seriesId}/collections")
    CollectionDto[] GetSeriesBySeriesIDCollectionsV1(
            @NotNull @Param("seriesId") String seriesId
    );

    /**
    * GetSeriesBySeriesIDBooksV1
    * 
    *
    * @param seriesId 
    * @param mediaStatus 
    * @param readStatus 
    * @param tag 
    * @param deleted 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/series/{seriesId}/books?mediaStatus={mediaStatus}&readStatus={readStatus}&tag={tag}&deleted={deleted}&unpaged={unpaged}&page={page}&size={size}&sort={sort}&author={author}")
    PageBookDto GetSeriesBySeriesIDBooksV1(
            @NotNull @Param("seriesId") String seriesId,
            @Nullable @Param("mediaStatus") String[] mediaStatus,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size,
            @Nullable @Param("sort") String[] sort,
            @Nullable @Param("author") String[] author
    );

    /**
    * GetSeriesUpdatedV1
    * 
    * Return recently updated series, but not newly added ones.
    *
    * @param libraryId 
    * @param deleted 
    * @param oneshot 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/series/updated?libraryId={libraryId}&deleted={deleted}&oneshot={oneshot}&unpaged={unpaged}&page={page}&size={size}")
    PageSeriesDto GetSeriesUpdatedV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetSeriesNewV1
    * 
    * Return newly added series.
    *
    * @param libraryId 
    * @param deleted 
    * @param oneshot 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/series/new?libraryId={libraryId}&deleted={deleted}&oneshot={oneshot}&unpaged={unpaged}&page={page}&size={size}")
    PageSeriesDto GetSeriesNewV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetSeriesLatestV1
    * 
    * Return recently added or updated series.
    *
    * @param libraryId 
    * @param deleted 
    * @param oneshot 
    * @param unpaged 
    * @param page Zero-based page index (0..N)
    * @param size The size of the page to be returned
    */
    @RequestLine("GET /api/v1/series/latest?libraryId={libraryId}&deleted={deleted}&oneshot={oneshot}&unpaged={unpaged}&page={page}&size={size}")
    PageSeriesDto GetSeriesLatestV1(
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("unpaged") Boolean unpaged,
            @Nullable @Param("page") Integer page,
            @Nullable @Param("size") Integer size
    );

    /**
    * GetSeriesAlphabeticalGroupsV1
    * 
    *
    * @param search 
    * @param libraryId 
    * @param collectionId 
    * @param status 
    * @param readStatus 
    * @param publisher 
    * @param language 
    * @param genre 
    * @param tag 
    * @param ageRating 
    * @param releaseYear 
    * @param sharingLabel 
    * @param deleted 
    * @param complete 
    * @param oneshot 
    * @param searchRegex Search by regex criteria, in the form: regex,field. Supported fields are TITLE and TITLE_SORT.
    * @param author Author criteria in the format: name,role. Multiple author criteria are supported.
    */
    @RequestLine("GET /api/v1/series/alphabetical-groups?search={search}&libraryId={libraryId}&collectionId={collectionId}&status={status}&readStatus={readStatus}&publisher={publisher}&language={language}&genre={genre}&tag={tag}&ageRating={ageRating}&releaseYear={releaseYear}&sharingLabel={sharingLabel}&deleted={deleted}&complete={complete}&oneshot={oneshot}&searchRegex={searchRegex}&author={author}")
    GroupCountDto[] GetSeriesAlphabeticalGroupsV1(
            @Nullable @Param("search") String search,
            @Nullable @Param("libraryId") String[] libraryId,
            @Nullable @Param("collectionId") String[] collectionId,
            @Nullable @Param("status") String[] status,
            @Nullable @Param("readStatus") String[] readStatus,
            @Nullable @Param("publisher") String[] publisher,
            @Nullable @Param("language") String[] language,
            @Nullable @Param("genre") String[] genre,
            @Nullable @Param("tag") String[] tag,
            @Nullable @Param("ageRating") String[] ageRating,
            @Nullable @Param("releaseYear") String[] releaseYear,
            @Nullable @Param("sharingLabel") String[] sharingLabel,
            @Nullable @Param("deleted") Boolean deleted,
            @Nullable @Param("complete") Boolean complete,
            @Nullable @Param("oneshot") Boolean oneshot,
            @Nullable @Param("searchRegex") String searchRegex,
            @Nullable @Param("author") String[] author
    );

}
