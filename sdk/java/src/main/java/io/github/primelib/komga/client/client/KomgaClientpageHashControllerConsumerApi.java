// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.komga.client.client;

import io.github.primelib.komga.client.models.PagePageHashKnownDto;
import io.github.primelib.komga.client.models.PagePageHashMatchDto;
import io.github.primelib.komga.client.models.PagePageHashUnknownDto;
import io.github.primelib.komga.client.operations.GetPageHashByPageHashThumbnailV1OperationSpec;
import io.github.primelib.komga.client.operations.GetPageHashByPageHashV1OperationSpec;
import io.github.primelib.komga.client.operations.GetPageHashesUnknownByPageHashThumbnailV1OperationSpec;
import io.github.primelib.komga.client.operations.GetPageHashesUnknownV1OperationSpec;
import io.github.primelib.komga.client.operations.GetPageHashesV1OperationSpec;
import io.github.primelib.komga.client.operations.PostPageHashByPageHashDeleteAllV1OperationSpec;
import io.github.primelib.komga.client.operations.PostPageHashByPageHashDeleteMatchV1OperationSpec;
import io.github.primelib.komga.client.operations.PutPageHashesV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * KomgaClientpageHashControllerConsumerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public class KomgaClientpageHashControllerConsumerApi {
    private final KomgaClientpageHashControllerApi api;

    public KomgaClientpageHashControllerConsumerApi(KomgaClientpageHashControllerApi api) {
        this.api = api;
    }


    /**
    * GetPageHashesV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>action: </li>
    *   <li>page: Zero-based page index (0..N)</li>
    *   <li>size: The size of the page to be returned</li>
    *   <li>sort: Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</li>
    * </ul>
    */
    public PagePageHashKnownDto GetPageHashesV1(Consumer<GetPageHashesV1OperationSpec> spec) {
        GetPageHashesV1OperationSpec r = new GetPageHashesV1OperationSpec(spec);
        return api.GetPageHashesV1(r.action(), r.page(), r.size(), r.sort());
    }

    /**
    * PutPageHashesV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: </li>
    * </ul>
    */
    public void PutPageHashesV1(Consumer<PutPageHashesV1OperationSpec> spec) {
        PutPageHashesV1OperationSpec r = new PutPageHashesV1OperationSpec(spec);
        api.PutPageHashesV1(r.payload());
    }

    /**
    * PostPageHashByPageHashDeleteMatchV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>pageHash: </li>
    *   <li>payload: </li>
    * </ul>
    */
    public void PostPageHashByPageHashDeleteMatchV1(Consumer<PostPageHashByPageHashDeleteMatchV1OperationSpec> spec) {
        PostPageHashByPageHashDeleteMatchV1OperationSpec r = new PostPageHashByPageHashDeleteMatchV1OperationSpec(spec);
        api.PostPageHashByPageHashDeleteMatchV1(r.pageHash(), r.payload());
    }

    /**
    * PostPageHashByPageHashDeleteAllV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>pageHash: </li>
    * </ul>
    */
    public void PostPageHashByPageHashDeleteAllV1(Consumer<PostPageHashByPageHashDeleteAllV1OperationSpec> spec) {
        PostPageHashByPageHashDeleteAllV1OperationSpec r = new PostPageHashByPageHashDeleteAllV1OperationSpec(spec);
        api.PostPageHashByPageHashDeleteAllV1(r.pageHash());
    }

    /**
    * GetPageHashByPageHashV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>pageHash: </li>
    *   <li>page: Zero-based page index (0..N)</li>
    *   <li>size: The size of the page to be returned</li>
    *   <li>sort: Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</li>
    * </ul>
    */
    public PagePageHashMatchDto GetPageHashByPageHashV1(Consumer<GetPageHashByPageHashV1OperationSpec> spec) {
        GetPageHashByPageHashV1OperationSpec r = new GetPageHashByPageHashV1OperationSpec(spec);
        return api.GetPageHashByPageHashV1(r.pageHash(), r.page(), r.size(), r.sort());
    }

    /**
    * GetPageHashByPageHashThumbnailV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>pageHash: </li>
    * </ul>
    */
    public void GetPageHashByPageHashThumbnailV1(Consumer<GetPageHashByPageHashThumbnailV1OperationSpec> spec) {
        GetPageHashByPageHashThumbnailV1OperationSpec r = new GetPageHashByPageHashThumbnailV1OperationSpec(spec);
        api.GetPageHashByPageHashThumbnailV1(r.pageHash());
    }

    /**
    * GetPageHashesUnknownV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>page: Zero-based page index (0..N)</li>
    *   <li>size: The size of the page to be returned</li>
    *   <li>sort: Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.</li>
    * </ul>
    */
    public PagePageHashUnknownDto GetPageHashesUnknownV1(Consumer<GetPageHashesUnknownV1OperationSpec> spec) {
        GetPageHashesUnknownV1OperationSpec r = new GetPageHashesUnknownV1OperationSpec(spec);
        return api.GetPageHashesUnknownV1(r.page(), r.size(), r.sort());
    }

    /**
    * GetPageHashesUnknownByPageHashThumbnailV1
    * 
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>pageHash: </li>
    *   <li>resize: </li>
    * </ul>
    */
    public void GetPageHashesUnknownByPageHashThumbnailV1(Consumer<GetPageHashesUnknownByPageHashThumbnailV1OperationSpec> spec) {
        GetPageHashesUnknownByPageHashThumbnailV1OperationSpec r = new GetPageHashesUnknownByPageHashThumbnailV1OperationSpec(spec);
        api.GetPageHashesUnknownByPageHashThumbnailV1(r.pageHash(), r.resize());
    }

}
