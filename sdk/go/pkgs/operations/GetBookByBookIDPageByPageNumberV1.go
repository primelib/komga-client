// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package operations

import (
	"context"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/primelib/komga-client/sdk/go/pkgs/models"
	"github.com/primelib/primecodegen-lib-go/requeststruct"
)

type GetBookByBookIDPageByPageNumberV1Request struct {
	Accept     []*models.MediaType `headerParam:"style=simple,explode=false,name=Accept"` // Some very limited server driven content negotiation is handled. If a book is a PDF book, and the Accept header contains 'application/pdf' as a more specific type than other 'image/' types, a raw PDF page will be returned.
	BookId     *string             `pathParam:"style=simple,explode=false,name=bookId"`
	PageNumber *int32              `pathParam:"style=simple,explode=false,name=pageNumber"`
	Convert    *string             `queryParam:"style=simple,explode=false,name=convert"`    // Convert the image to the provided format.
	ZeroBased  *bool               `queryParam:"style=simple,explode=false,name=zero_based"` // If set to true, pages will start at index 0. If set to false, pages will start at index 1.
}

type GetBookByBookIDPageByPageNumberV1Response struct {
	// Error response
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

// GetBookByBookIDPageByPageNumberV1
//
//meta:operation GET /api/v1/books/{bookId}/pages/{pageNumber}
func GetBookByBookIDPageByPageNumberV1(client *resty.Client, ctx context.Context, req GetBookByBookIDPageByPageNumberV1Request) (*GetBookByBookIDPageByPageNumberV1Response, error) {
	r := client.R().SetContext(ctx)

	// process request parameters
	reqData, err := requeststruct.ResolveRequestParams(req)
	if err != nil {
		return nil, err
	}
	r.SetHeaders(reqData.HeaderParams)
	r.SetPathParams(reqData.PathParams)
	r.SetQueryParamsFromValues(reqData.QueryParams)
	if reqData.BodyParam != nil {
		r.SetBody(reqData.BodyParam)
	}

	// send the request
	resp, err := r.Get("/api/v1/books/{bookId}/pages/{pageNumber}")
	if err != nil {
		return nil, err
	}

	return &GetBookByBookIDPageByPageNumberV1Response{
		StatusCode:  resp.StatusCode(),
		RawResponse: resp.RawResponse,
	}, nil
}
