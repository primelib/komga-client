// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package client

import (
	"context"
	"errors"
	"fmt"
	"net"
	"net/http"
	"strings"
	"time"

	"github.com/go-resty/resty/v2"
	"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
)

const unixSocketPrefix = "unix://"

type Client struct {
	// Client is the underlying HTTP client library.
	restyClient                *resty.Client
	AnnouncementController     *AnnouncementControllerService
	BookController             *BookControllerService
	ClaimController            *ClaimControllerService
	FileSystemController       *FileSystemControllerService
	HistoricalEventController  *HistoricalEventControllerService
	LibraryController          *LibraryControllerService
	LoginController            *LoginControllerService
	OAuth2Controller           *OAuth2ControllerService
	Opds2Controller            *Opds2ControllerService
	OpdsCommonController       *OpdsCommonControllerService
	OpdsController             *OpdsControllerService
	PageHashController         *PageHashControllerService
	ReadListController         *ReadListControllerService
	ReferentialController      *ReferentialControllerService
	SeriesCollectionController *SeriesCollectionControllerService
	SeriesController           *SeriesControllerService
	SettingsController         *SettingsControllerService
	TaskController             *TaskControllerService
	TransientBooksController   *TransientBooksControllerService
	UserController             *UserControllerService
}

var ErrFailedToCreateClient = fmt.Errorf("failed to create client")

// New returns a new KomgaClient API client.
func New(options ...OptionFunc) (Client, error) {
	restyClient := resty.NewWithClient(
		&http.Client{
			Transport: otelhttp.NewTransport(http.DefaultTransport),
		},
	)

	// disable debug and trace by default
	restyClient.SetDebug(false) // disable debug mode
	// resty warns when using basic auth on non-https
	restyClient.SetDisableWarn(true)
	// user-agent
	restyClient.SetHeader("User-Agent", "PrimeCodeGen-KomgaClient/1.0.0")

	client := Client{
		restyClient: restyClient,
	}
	client.AnnouncementController = &AnnouncementControllerService{client: &client}
	client.BookController = &BookControllerService{client: &client}
	client.ClaimController = &ClaimControllerService{client: &client}
	client.FileSystemController = &FileSystemControllerService{client: &client}
	client.HistoricalEventController = &HistoricalEventControllerService{client: &client}
	client.LibraryController = &LibraryControllerService{client: &client}
	client.LoginController = &LoginControllerService{client: &client}
	client.OAuth2Controller = &OAuth2ControllerService{client: &client}
	client.Opds2Controller = &Opds2ControllerService{client: &client}
	client.OpdsCommonController = &OpdsCommonControllerService{client: &client}
	client.OpdsController = &OpdsControllerService{client: &client}
	client.PageHashController = &PageHashControllerService{client: &client}
	client.ReadListController = &ReadListControllerService{client: &client}
	client.ReferentialController = &ReferentialControllerService{client: &client}
	client.SeriesCollectionController = &SeriesCollectionControllerService{client: &client}
	client.SeriesController = &SeriesControllerService{client: &client}
	client.SettingsController = &SettingsControllerService{client: &client}
	client.TaskController = &TaskControllerService{client: &client}
	client.TransientBooksController = &TransientBooksControllerService{client: &client}
	client.UserController = &UserControllerService{client: &client}

	for _, f := range options {
		err := f(&client)
		if err != nil {
			return client, errors.Join(ErrFailedToCreateClient, err)
		}
	}

	// defaults
	if restyClient.BaseURL == "" {
		err := WithBaseURL("http://127.0.0.1:25600")(&client)
		if err != nil {
			return client, errors.Join(ErrFailedToCreateClient, err)
		}
	}

	return client, nil
}

// OptionFunc can be used to customize the resty client.
type OptionFunc func(*Client) error

// WithBaseURL sets the base URL for API requests to a custom endpoint.
func WithBaseURL(urlStr string) OptionFunc {
	return func(c *Client) error {
		if strings.HasPrefix(urlStr, unixSocketPrefix) {
			unixSocket := strings.TrimPrefix(urlStr, unixSocketPrefix)

			transport := http.Transport{
				DialContext: func(_ context.Context, _, _ string) (net.Conn, error) {
					return net.Dial("unix", unixSocket)
				},
			}
			c.restyClient.SetTransport(&transport).SetScheme("http").SetBaseURL(unixSocket)
		} else {
			c.restyClient.SetBaseURL(urlStr)
		}
		return nil
	}
}

// WithUserAgent sets the User-Agent header for API requests.
func WithUserAgent(userAgent string) OptionFunc {
	return func(c *Client) error {
		c.restyClient.SetHeader("User-Agent", userAgent)
		return nil
	}
}

// WithTimeout sets the timeout for API requests.
func WithTimeout(timeout int) OptionFunc {
	return func(c *Client) error {
		c.restyClient.SetTimeout(time.Duration(timeout) * time.Second)
		return nil
	}
}

// WithRetryCount sets the number of retries for API requests.
func WithRetryCount(retryCount int) OptionFunc {
	return func(c *Client) error {
		c.restyClient.SetRetryCount(retryCount)
		return nil
	}
}

// WithRetryWaitTime sets the initial wait time between retries for API requests.
func WithRetryWaitTime(waitTime int) OptionFunc {
	return func(c *Client) error {
		c.restyClient.SetRetryWaitTime(time.Duration(waitTime) * time.Millisecond)
		return nil
	}
}

// WithRetryMaxWaitTime sets the maximum wait time between retries for API requests.
func WithRetryMaxWaitTime(maxWaitTime int) OptionFunc {
	return func(c *Client) error {
		c.restyClient.SetRetryMaxWaitTime(time.Duration(maxWaitTime) * time.Millisecond)
		return nil
	}
}

// WithRetryCondition sets the condition for retrying API requests.
func WithRetryCondition(condition resty.RetryConditionFunc) OptionFunc {
	return func(c *Client) error {
		c.restyClient.AddRetryCondition(condition)
		return nil
	}
}

// WithBasicAuth sets the basic authentication credentials for API requests.
func WithBasicAuth(username string, password string) OptionFunc {
	return func(c *Client) error {
		c.restyClient.SetBasicAuth(username, password)
		return nil
	}
}

// WithAuthToken sets the bearer token for API requests.
func WithAuthToken(scheme string, token string) OptionFunc {
	return func(c *Client) error {
		if scheme != "" {
			c.restyClient.SetAuthScheme(scheme)
		} else {
			c.restyClient.SetAuthScheme("Bearer")
		}
		c.restyClient.SetAuthToken(token)
		return nil
	}
}

// WithDebug enables or disables debug mode for the resty client.
func WithDebug(enable bool) OptionFunc {
	return func(c *Client) error {
		c.restyClient.SetDebug(enable)
		if enable {
			c.restyClient.EnableTrace()
		} else {
			c.restyClient.DisableTrace()
		}
		return nil
	}
}

type Service struct {
	client *Client
}
